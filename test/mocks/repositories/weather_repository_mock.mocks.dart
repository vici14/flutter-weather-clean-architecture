// Mocks generated by Mockito 5.4.5 from annotations
// in weather_app_assignment/test/mocks/repositories/weather_repository_mock.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:fpdart/fpdart.dart' as _i4;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i7;
import 'package:weather_app_assignment/data/exception/DataException.dart'
    as _i5;
import 'package:weather_app_assignment/data/models/weather_forecast.dart'
    as _i6;
import 'package:weather_app_assignment/data/repositories/i_weather_repository.dart'
    as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [IWeatherRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockIWeatherRepository extends _i1.Mock
    implements _i2.IWeatherRepository {
  MockIWeatherRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<_i4.Either<_i5.DataException, _i6.WeatherForecast>>
  getWeatherForecast({
    required double? lat,
    required double? lon,
    String? units,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#getWeatherForecast, [], {
              #lat: lat,
              #lon: lon,
              #units: units,
            }),
            returnValue: _i3.Future<
              _i4.Either<_i5.DataException, _i6.WeatherForecast>
            >.value(
              _i7.dummyValue<
                _i4.Either<_i5.DataException, _i6.WeatherForecast>
              >(
                this,
                Invocation.method(#getWeatherForecast, [], {
                  #lat: lat,
                  #lon: lon,
                  #units: units,
                }),
              ),
            ),
          )
          as _i3.Future<_i4.Either<_i5.DataException, _i6.WeatherForecast>>);

  @override
  _i3.Future<_i4.Either<_i5.DataException, List<_i6.DailyForecast>>>
  getFourDaysForecast({
    required double? lat,
    required double? lon,
    String? units,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#getFourDaysForecast, [], {
              #lat: lat,
              #lon: lon,
              #units: units,
            }),
            returnValue: _i3.Future<
              _i4.Either<_i5.DataException, List<_i6.DailyForecast>>
            >.value(
              _i7.dummyValue<
                _i4.Either<_i5.DataException, List<_i6.DailyForecast>>
              >(
                this,
                Invocation.method(#getFourDaysForecast, [], {
                  #lat: lat,
                  #lon: lon,
                  #units: units,
                }),
              ),
            ),
          )
          as _i3.Future<
            _i4.Either<_i5.DataException, List<_i6.DailyForecast>>
          >);
}
