import 'package:flutter/material.dart';
import 'package:get_it/get_it.dart';
import 'package:mockito/mockito.dart';
import 'package:weather_app_assignment/core/base/bloc/loading_state.dart';
import 'package:weather_app_assignment/core/services/loading_manager.dart';
import 'package:weather_app_assignment/core/services/network_checker.dart';
import 'package:weather_app_assignment/data/models/country.dart';
import 'package:weather_app_assignment/data/models/weather_forecast.dart';
import 'package:weather_app_assignment/data/repositories/i_location_repository.dart';
import 'package:weather_app_assignment/data/repositories/i_weather_repository.dart';
import 'package:weather_app_assignment/features/location/bloc/location_bloc.dart';
import 'package:weather_app_assignment/features/location/bloc/location_state.dart';
import 'package:weather_app_assignment/features/weather/bloc/weather_bloc.dart';
import 'package:weather_app_assignment/features/weather/bloc/weather_state.dart';
import 'package:fpdart/fpdart.dart';
import 'package:weather_app_assignment/data/exception/DataException.dart';

import 'mock_generators.mocks.dart';

/// Set up all test dependencies with proper defaults
/// This should be called in the setUp function of each test file
void setupTestDependencies() {
  final getIt = GetIt.instance;

  // Register dummy values for Either types
  provideDummy<Either<DataException, List<Country>>>(
    const Right<DataException, List<Country>>([]),
  );

  provideDummy<Either<DataException, Country>>(
    Right<DataException, Country>(const Country(
      id: 0,
      name: 'Dummy',
      iso2: 'XX',
      iso3: 'XXX',
      phonecode: '0',
      capital: 'Dummy',
      currency: 'XXX',
      native: 'Dummy',
      emoji: 'üè≥Ô∏è',
    )),
  );

  provideDummy<Either<DataException, List<DailyForecast>>>(
    const Right<DataException, List<DailyForecast>>([]),
  );

  // Reset in case there are registered instances
  if (getIt.isRegistered<LoadingManager>()) {
    getIt.unregister<LoadingManager>();
  }

  if (getIt.isRegistered<NetworkChecker>()) {
    getIt.unregister<NetworkChecker>();
  }

  if (getIt.isRegistered<ILocationRepository>()) {
    getIt.unregister<ILocationRepository>();
  }

  if (getIt.isRegistered<IWeatherRepository>()) {
    getIt.unregister<IWeatherRepository>();
  }

  if (getIt.isRegistered<LocationBloc>()) {
    getIt.unregister<LocationBloc>();
  }

  if (getIt.isRegistered<WeatherBloc>()) {
    getIt.unregister<WeatherBloc>();
  }

  // Register mock dependencies using generated mocks
  final navigatorKey = GlobalKey<NavigatorState>();
  final mockLoadingManager = MockLoadingManager();
  final mockNetworkChecker = MockNetworkChecker();

  // Use mocks generated by Mockito
  final mockLocationRepository = MockILocationRepository();
  final mockWeatherRepository = MockIWeatherRepository();
  final mockLocationBloc = MockLocationBloc();
  final mockWeatherBloc = MockWeatherBloc();

  getIt.registerSingleton<LoadingManager>(mockLoadingManager);
  getIt.registerSingleton<NetworkChecker>(mockNetworkChecker);
  getIt.registerSingleton<ILocationRepository>(mockLocationRepository);
  getIt.registerSingleton<IWeatherRepository>(mockWeatherRepository);

  // Register mock blocs with default states
  getIt.registerSingleton<LocationBloc>(mockLocationBloc);
  getIt.registerSingleton<WeatherBloc>(mockWeatherBloc);

  // Initialize default state for blocs
  mockLocationBloc.setupDefaultState();
  mockWeatherBloc.setupDefaultState();

  // Setup network checker default
  when(mockNetworkChecker.hasConnection).thenReturn(true);
  when(mockNetworkChecker.connectionStatus)
      .thenAnswer((_) => Stream.value(true));

  // Setup loading manager stubs
  when(mockLoadingManager.showLoading()).thenAnswer((_) => Future.value());
  when(mockLoadingManager.hideLoading()).thenAnswer((_) => Future.value());
}

/// Clear all registered dependencies
/// This should be called in the tearDown function of each test file
void tearDownTestDependencies() {
  GetIt.instance.reset();
}

/// Extension for LocationBloc to allow setting mock state
extension MockLocationBlocExtension on MockLocationBloc {
  void mockState(LocationState newState) {
    when(state).thenReturn(newState);
  }

  /// Sets up a default location state with all required properties
  void setupDefaultState() {
    final defaultState = LocationState(
      countriesLoadingState: const LoadingState<List<Country>>(),
      searchLoadingState: const LoadingState<List<Country>>(),
      countryDetailsLoadingState: const LoadingState<Country>(),
      countries: const [],
      allCountries: const [],
      timeStamp: DateTime.now().millisecondsSinceEpoch,
      errorMessage: '',
    );

    when(state).thenReturn(defaultState);
  }

  /// Sets up a state with test countries
  void setupWithCountries(List<Country> testCountries) {
    final stateWithCountries = LocationState(
      countriesLoadingState: LoadingState<List<Country>>(
        isLoading: false,
        isLoadedSuccess: true,
        value: testCountries,
      ),
      countries: testCountries,
      allCountries: testCountries,
      timeStamp: DateTime.now().millisecondsSinceEpoch,
    );

    when(state).thenReturn(stateWithCountries);
  }
}

/// Extension for WeatherBloc to allow setting mock state
extension MockWeatherBlocExtension on MockWeatherBloc {
  void mockState(WeatherState newState) {
    when(state).thenReturn(newState);
  }

  /// Sets up a default weather state with all required properties
  void setupDefaultState() {
    final defaultState = WeatherState(
      forecastLoadingState: const LoadingState<List<DailyForecast>>(),
      forecast: const [],
      timeStamp: DateTime.now().millisecondsSinceEpoch,
    );

    when(state).thenReturn(defaultState);
  }
}
