// Mocks generated by Mockito 5.4.5 from annotations
// in weather_app_assignment/test/mocks/mock_generators.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i13;
import 'dart:ui' as _i29;

import 'package:dio/dio.dart' as _i2;
import 'package:flutter/foundation.dart' as _i10;
import 'package:flutter/material.dart' as _i9;
import 'package:flutter/scheduler.dart' as _i11;
import 'package:flutter_bloc/flutter_bloc.dart' as _i26;
import 'package:flutter_secure_storage/flutter_secure_storage.dart' as _i6;
import 'package:fpdart/fpdart.dart' as _i14;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i17;
import 'package:weather_app_assignment/core/services/loading_manager.dart'
    as _i20;
import 'package:weather_app_assignment/core/services/network_checker.dart'
    as _i21;
import 'package:weather_app_assignment/core/services/secure_storage.dart'
    as _i23;
import 'package:weather_app_assignment/data/api_client.dart' as _i5;
import 'package:weather_app_assignment/data/exception/DataException.dart'
    as _i15;
import 'package:weather_app_assignment/data/models/country.dart' as _i16;
import 'package:weather_app_assignment/data/models/weather_forecast.dart'
    as _i19;
import 'package:weather_app_assignment/data/repositories/i_location_repository.dart'
    as _i12;
import 'package:weather_app_assignment/data/repositories/i_weather_repository.dart'
    as _i18;
import 'package:weather_app_assignment/data/service_manager.dart' as _i22;
import 'package:weather_app_assignment/data/services/location_service.dart'
    as _i3;
import 'package:weather_app_assignment/data/services/weather_service.dart'
    as _i4;
import 'package:weather_app_assignment/features/location/bloc/location_bloc.dart'
    as _i24;
import 'package:weather_app_assignment/features/location/bloc/location_event.dart'
    as _i25;
import 'package:weather_app_assignment/features/location/bloc/location_state.dart'
    as _i7;
import 'package:weather_app_assignment/features/weather/bloc/weather_bloc.dart'
    as _i27;
import 'package:weather_app_assignment/features/weather/bloc/weather_event.dart'
    as _i28;
import 'package:weather_app_assignment/features/weather/bloc/weather_state.dart'
    as _i8;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeResponse_0<T1> extends _i1.SmartFake implements _i2.Response<T1> {
  _FakeResponse_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeLocationService_1 extends _i1.SmartFake
    implements _i3.LocationService {
  _FakeLocationService_1(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeWeatherService_2 extends _i1.SmartFake
    implements _i4.WeatherService {
  _FakeWeatherService_2(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeApiClient_3 extends _i1.SmartFake implements _i5.ApiClient {
  _FakeApiClient_3(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeIOSOptions_4 extends _i1.SmartFake implements _i6.IOSOptions {
  _FakeIOSOptions_4(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeAndroidOptions_5 extends _i1.SmartFake
    implements _i6.AndroidOptions {
  _FakeAndroidOptions_5(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeLinuxOptions_6 extends _i1.SmartFake implements _i6.LinuxOptions {
  _FakeLinuxOptions_6(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeWindowsOptions_7 extends _i1.SmartFake
    implements _i6.WindowsOptions {
  _FakeWindowsOptions_7(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeWebOptions_8 extends _i1.SmartFake implements _i6.WebOptions {
  _FakeWebOptions_8(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeMacOsOptions_9 extends _i1.SmartFake implements _i6.MacOsOptions {
  _FakeMacOsOptions_9(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeBaseOptions_10 extends _i1.SmartFake implements _i2.BaseOptions {
  _FakeBaseOptions_10(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeHttpClientAdapter_11 extends _i1.SmartFake
    implements _i2.HttpClientAdapter {
  _FakeHttpClientAdapter_11(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeTransformer_12 extends _i1.SmartFake implements _i2.Transformer {
  _FakeTransformer_12(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeInterceptors_13 extends _i1.SmartFake implements _i2.Interceptors {
  _FakeInterceptors_13(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeDio_14 extends _i1.SmartFake implements _i2.Dio {
  _FakeDio_14(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeLocationState_15 extends _i1.SmartFake implements _i7.LocationState {
  _FakeLocationState_15(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeWeatherState_16 extends _i1.SmartFake implements _i8.WeatherState {
  _FakeWeatherState_16(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeFocusNode_17 extends _i1.SmartFake implements _i9.FocusNode {
  _FakeFocusNode_17(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);

  @override
  String toString({_i9.DiagnosticLevel? minLevel = _i9.DiagnosticLevel.info}) =>
      super.toString();
}

class _FakeValueNotifier_18<T> extends _i1.SmartFake
    implements _i9.ValueNotifier<T> {
  _FakeValueNotifier_18(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeNavigator_19 extends _i1.SmartFake implements _i9.Navigator {
  _FakeNavigator_19(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);

  @override
  String toString({_i9.DiagnosticLevel? minLevel = _i9.DiagnosticLevel.info}) =>
      super.toString();
}

class _FakeBuildContext_20 extends _i1.SmartFake implements _i9.BuildContext {
  _FakeBuildContext_20(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeWidget_21 extends _i1.SmartFake implements _i9.Widget {
  _FakeWidget_21(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);

  @override
  String toString({_i9.DiagnosticLevel? minLevel = _i9.DiagnosticLevel.info}) =>
      super.toString();
}

class _FakeDiagnosticsNode_22 extends _i1.SmartFake
    implements _i9.DiagnosticsNode {
  _FakeDiagnosticsNode_22(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);

  @override
  String toString({
    _i10.TextTreeConfiguration? parentConfiguration,
    _i9.DiagnosticLevel? minLevel = _i9.DiagnosticLevel.info,
  }) => super.toString();
}

class _FakeTicker_23 extends _i1.SmartFake implements _i11.Ticker {
  _FakeTicker_23(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);

  @override
  String toString({bool? debugIncludeStack = false}) => super.toString();
}

class _FakeOverlay_24 extends _i1.SmartFake implements _i9.Overlay {
  _FakeOverlay_24(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);

  @override
  String toString({_i9.DiagnosticLevel? minLevel = _i9.DiagnosticLevel.info}) =>
      super.toString();
}

/// A class which mocks [ILocationRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockILocationRepository extends _i1.Mock
    implements _i12.ILocationRepository {
  @override
  _i13.Future<_i14.Either<_i15.DataException, List<_i16.Country>>>
  getAllCountries() =>
      (super.noSuchMethod(
            Invocation.method(#getAllCountries, []),
            returnValue: _i13.Future<
              _i14.Either<_i15.DataException, List<_i16.Country>>
            >.value(
              _i17.dummyValue<
                _i14.Either<_i15.DataException, List<_i16.Country>>
              >(this, Invocation.method(#getAllCountries, [])),
            ),
            returnValueForMissingStub: _i13.Future<
              _i14.Either<_i15.DataException, List<_i16.Country>>
            >.value(
              _i17.dummyValue<
                _i14.Either<_i15.DataException, List<_i16.Country>>
              >(this, Invocation.method(#getAllCountries, [])),
            ),
          )
          as _i13.Future<_i14.Either<_i15.DataException, List<_i16.Country>>>);

  @override
  _i13.Future<_i14.Either<_i15.DataException, _i16.Country>> getCountryDetails(
    String? iso2,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#getCountryDetails, [iso2]),
            returnValue: _i13.Future<
              _i14.Either<_i15.DataException, _i16.Country>
            >.value(
              _i17.dummyValue<_i14.Either<_i15.DataException, _i16.Country>>(
                this,
                Invocation.method(#getCountryDetails, [iso2]),
              ),
            ),
            returnValueForMissingStub: _i13.Future<
              _i14.Either<_i15.DataException, _i16.Country>
            >.value(
              _i17.dummyValue<_i14.Either<_i15.DataException, _i16.Country>>(
                this,
                Invocation.method(#getCountryDetails, [iso2]),
              ),
            ),
          )
          as _i13.Future<_i14.Either<_i15.DataException, _i16.Country>>);
}

/// A class which mocks [IWeatherRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockIWeatherRepository extends _i1.Mock
    implements _i18.IWeatherRepository {
  @override
  _i13.Future<_i14.Either<_i15.DataException, _i19.WeatherForecast>>
  getWeatherForecast({
    required double? lat,
    required double? lon,
    String? units,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#getWeatherForecast, [], {
              #lat: lat,
              #lon: lon,
              #units: units,
            }),
            returnValue: _i13.Future<
              _i14.Either<_i15.DataException, _i19.WeatherForecast>
            >.value(
              _i17.dummyValue<
                _i14.Either<_i15.DataException, _i19.WeatherForecast>
              >(
                this,
                Invocation.method(#getWeatherForecast, [], {
                  #lat: lat,
                  #lon: lon,
                  #units: units,
                }),
              ),
            ),
            returnValueForMissingStub: _i13.Future<
              _i14.Either<_i15.DataException, _i19.WeatherForecast>
            >.value(
              _i17.dummyValue<
                _i14.Either<_i15.DataException, _i19.WeatherForecast>
              >(
                this,
                Invocation.method(#getWeatherForecast, [], {
                  #lat: lat,
                  #lon: lon,
                  #units: units,
                }),
              ),
            ),
          )
          as _i13.Future<
            _i14.Either<_i15.DataException, _i19.WeatherForecast>
          >);

  @override
  _i13.Future<_i14.Either<_i15.DataException, List<_i19.DailyForecast>>>
  getFourDaysForecast({
    required double? lat,
    required double? lon,
    String? units,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#getFourDaysForecast, [], {
              #lat: lat,
              #lon: lon,
              #units: units,
            }),
            returnValue: _i13.Future<
              _i14.Either<_i15.DataException, List<_i19.DailyForecast>>
            >.value(
              _i17.dummyValue<
                _i14.Either<_i15.DataException, List<_i19.DailyForecast>>
              >(
                this,
                Invocation.method(#getFourDaysForecast, [], {
                  #lat: lat,
                  #lon: lon,
                  #units: units,
                }),
              ),
            ),
            returnValueForMissingStub: _i13.Future<
              _i14.Either<_i15.DataException, List<_i19.DailyForecast>>
            >.value(
              _i17.dummyValue<
                _i14.Either<_i15.DataException, List<_i19.DailyForecast>>
              >(
                this,
                Invocation.method(#getFourDaysForecast, [], {
                  #lat: lat,
                  #lon: lon,
                  #units: units,
                }),
              ),
            ),
          )
          as _i13.Future<
            _i14.Either<_i15.DataException, List<_i19.DailyForecast>>
          >);
}

/// A class which mocks [LoadingManager].
///
/// See the documentation for Mockito's code generation for more information.
class MockLoadingManager extends _i1.Mock implements _i20.LoadingManager {
  @override
  _i13.Stream<_i20.LoadingStatus> get loadingStream =>
      (super.noSuchMethod(
            Invocation.getter(#loadingStream),
            returnValue: _i13.Stream<_i20.LoadingStatus>.empty(),
            returnValueForMissingStub: _i13.Stream<_i20.LoadingStatus>.empty(),
          )
          as _i13.Stream<_i20.LoadingStatus>);

  @override
  bool get isLoading =>
      (super.noSuchMethod(
            Invocation.getter(#isLoading),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  void showLoading() => super.noSuchMethod(
    Invocation.method(#showLoading, []),
    returnValueForMissingStub: null,
  );

  @override
  void hideLoading() => super.noSuchMethod(
    Invocation.method(#hideLoading, []),
    returnValueForMissingStub: null,
  );

  @override
  void showLoadingWithMessage(String? message) => super.noSuchMethod(
    Invocation.method(#showLoadingWithMessage, [message]),
    returnValueForMissingStub: null,
  );

  @override
  void forceHideLoading() => super.noSuchMethod(
    Invocation.method(#forceHideLoading, []),
    returnValueForMissingStub: null,
  );

  @override
  void dispose() => super.noSuchMethod(
    Invocation.method(#dispose, []),
    returnValueForMissingStub: null,
  );
}

/// A class which mocks [NetworkChecker].
///
/// See the documentation for Mockito's code generation for more information.
class MockNetworkChecker extends _i1.Mock implements _i21.NetworkChecker {
  @override
  bool get isInitialized =>
      (super.noSuchMethod(
            Invocation.getter(#isInitialized),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  set isInitialized(bool? _isInitialized) => super.noSuchMethod(
    Invocation.setter(#isInitialized, _isInitialized),
    returnValueForMissingStub: null,
  );

  @override
  _i13.Stream<bool> get connectionStatus =>
      (super.noSuchMethod(
            Invocation.getter(#connectionStatus),
            returnValue: _i13.Stream<bool>.empty(),
            returnValueForMissingStub: _i13.Stream<bool>.empty(),
          )
          as _i13.Stream<bool>);

  @override
  bool get hasConnection =>
      (super.noSuchMethod(
            Invocation.getter(#hasConnection),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  _i13.Future<bool> checkConnection() =>
      (super.noSuchMethod(
            Invocation.method(#checkConnection, []),
            returnValue: _i13.Future<bool>.value(false),
            returnValueForMissingStub: _i13.Future<bool>.value(false),
          )
          as _i13.Future<bool>);

  @override
  void showConnectivityMessage(_i9.BuildContext? context, bool? isConnected) =>
      super.noSuchMethod(
        Invocation.method(#showConnectivityMessage, [context, isConnected]),
        returnValueForMissingStub: null,
      );

  @override
  void dispose() => super.noSuchMethod(
    Invocation.method(#dispose, []),
    returnValueForMissingStub: null,
  );
}

/// A class which mocks [ApiClient].
///
/// See the documentation for Mockito's code generation for more information.
class MockApiClient extends _i1.Mock implements _i5.ApiClient {
  @override
  _i13.Future<_i2.Response<T>> get<T>(
    String? path, {
    Map<String, dynamic>? queryParameters,
    Map<String, dynamic>? headers,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #get,
              [path],
              {#queryParameters: queryParameters, #headers: headers},
            ),
            returnValue: _i13.Future<_i2.Response<T>>.value(
              _FakeResponse_0<T>(
                this,
                Invocation.method(
                  #get,
                  [path],
                  {#queryParameters: queryParameters, #headers: headers},
                ),
              ),
            ),
            returnValueForMissingStub: _i13.Future<_i2.Response<T>>.value(
              _FakeResponse_0<T>(
                this,
                Invocation.method(
                  #get,
                  [path],
                  {#queryParameters: queryParameters, #headers: headers},
                ),
              ),
            ),
          )
          as _i13.Future<_i2.Response<T>>);

  @override
  void close() => super.noSuchMethod(
    Invocation.method(#close, []),
    returnValueForMissingStub: null,
  );
}

/// A class which mocks [ServiceManager].
///
/// See the documentation for Mockito's code generation for more information.
class MockServiceManager extends _i1.Mock implements _i22.ServiceManager {
  @override
  bool get isInitialized =>
      (super.noSuchMethod(
            Invocation.getter(#isInitialized),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  _i3.LocationService get locationService =>
      (super.noSuchMethod(
            Invocation.getter(#locationService),
            returnValue: _FakeLocationService_1(
              this,
              Invocation.getter(#locationService),
            ),
            returnValueForMissingStub: _FakeLocationService_1(
              this,
              Invocation.getter(#locationService),
            ),
          )
          as _i3.LocationService);

  @override
  _i4.WeatherService get weatherService =>
      (super.noSuchMethod(
            Invocation.getter(#weatherService),
            returnValue: _FakeWeatherService_2(
              this,
              Invocation.getter(#weatherService),
            ),
            returnValueForMissingStub: _FakeWeatherService_2(
              this,
              Invocation.getter(#weatherService),
            ),
          )
          as _i4.WeatherService);

  @override
  void initialize({
    required String? locationApiKey,
    required String? weatherApiKey,
  }) => super.noSuchMethod(
    Invocation.method(#initialize, [], {
      #locationApiKey: locationApiKey,
      #weatherApiKey: weatherApiKey,
    }),
    returnValueForMissingStub: null,
  );

  @override
  void dispose() => super.noSuchMethod(
    Invocation.method(#dispose, []),
    returnValueForMissingStub: null,
  );
}

/// A class which mocks [WeatherService].
///
/// See the documentation for Mockito's code generation for more information.
class MockWeatherService extends _i1.Mock implements _i4.WeatherService {
  @override
  _i5.ApiClient get client =>
      (super.noSuchMethod(
            Invocation.getter(#client),
            returnValue: _FakeApiClient_3(this, Invocation.getter(#client)),
            returnValueForMissingStub: _FakeApiClient_3(
              this,
              Invocation.getter(#client),
            ),
          )
          as _i5.ApiClient);

  @override
  _i13.Future<_i14.Either<_i15.DataException, _i19.WeatherForecast>>
  getWeatherForecast({
    required double? lat,
    required double? lon,
    String? units = 'metric',
  }) =>
      (super.noSuchMethod(
            Invocation.method(#getWeatherForecast, [], {
              #lat: lat,
              #lon: lon,
              #units: units,
            }),
            returnValue: _i13.Future<
              _i14.Either<_i15.DataException, _i19.WeatherForecast>
            >.value(
              _i17.dummyValue<
                _i14.Either<_i15.DataException, _i19.WeatherForecast>
              >(
                this,
                Invocation.method(#getWeatherForecast, [], {
                  #lat: lat,
                  #lon: lon,
                  #units: units,
                }),
              ),
            ),
            returnValueForMissingStub: _i13.Future<
              _i14.Either<_i15.DataException, _i19.WeatherForecast>
            >.value(
              _i17.dummyValue<
                _i14.Either<_i15.DataException, _i19.WeatherForecast>
              >(
                this,
                Invocation.method(#getWeatherForecast, [], {
                  #lat: lat,
                  #lon: lon,
                  #units: units,
                }),
              ),
            ),
          )
          as _i13.Future<
            _i14.Either<_i15.DataException, _i19.WeatherForecast>
          >);

  @override
  _i13.Future<_i14.Either<_i15.DataException, List<_i19.DailyForecast>>>
  getFourDaysForecast({
    required double? lat,
    required double? lon,
    String? units = 'metric',
  }) =>
      (super.noSuchMethod(
            Invocation.method(#getFourDaysForecast, [], {
              #lat: lat,
              #lon: lon,
              #units: units,
            }),
            returnValue: _i13.Future<
              _i14.Either<_i15.DataException, List<_i19.DailyForecast>>
            >.value(
              _i17.dummyValue<
                _i14.Either<_i15.DataException, List<_i19.DailyForecast>>
              >(
                this,
                Invocation.method(#getFourDaysForecast, [], {
                  #lat: lat,
                  #lon: lon,
                  #units: units,
                }),
              ),
            ),
            returnValueForMissingStub: _i13.Future<
              _i14.Either<_i15.DataException, List<_i19.DailyForecast>>
            >.value(
              _i17.dummyValue<
                _i14.Either<_i15.DataException, List<_i19.DailyForecast>>
              >(
                this,
                Invocation.method(#getFourDaysForecast, [], {
                  #lat: lat,
                  #lon: lon,
                  #units: units,
                }),
              ),
            ),
          )
          as _i13.Future<
            _i14.Either<_i15.DataException, List<_i19.DailyForecast>>
          >);
}

/// A class which mocks [LocationService].
///
/// See the documentation for Mockito's code generation for more information.
class MockLocationService extends _i1.Mock implements _i3.LocationService {
  @override
  _i5.ApiClient get client =>
      (super.noSuchMethod(
            Invocation.getter(#client),
            returnValue: _FakeApiClient_3(this, Invocation.getter(#client)),
            returnValueForMissingStub: _FakeApiClient_3(
              this,
              Invocation.getter(#client),
            ),
          )
          as _i5.ApiClient);

  @override
  _i13.Future<_i14.Either<_i15.DataException, List<_i16.Country>>>
  getAllCountries() =>
      (super.noSuchMethod(
            Invocation.method(#getAllCountries, []),
            returnValue: _i13.Future<
              _i14.Either<_i15.DataException, List<_i16.Country>>
            >.value(
              _i17.dummyValue<
                _i14.Either<_i15.DataException, List<_i16.Country>>
              >(this, Invocation.method(#getAllCountries, [])),
            ),
            returnValueForMissingStub: _i13.Future<
              _i14.Either<_i15.DataException, List<_i16.Country>>
            >.value(
              _i17.dummyValue<
                _i14.Either<_i15.DataException, List<_i16.Country>>
              >(this, Invocation.method(#getAllCountries, [])),
            ),
          )
          as _i13.Future<_i14.Either<_i15.DataException, List<_i16.Country>>>);

  @override
  _i13.Future<_i14.Either<_i15.DataException, _i16.Country>> getCountryDetails(
    String? iso2,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#getCountryDetails, [iso2]),
            returnValue: _i13.Future<
              _i14.Either<_i15.DataException, _i16.Country>
            >.value(
              _i17.dummyValue<_i14.Either<_i15.DataException, _i16.Country>>(
                this,
                Invocation.method(#getCountryDetails, [iso2]),
              ),
            ),
            returnValueForMissingStub: _i13.Future<
              _i14.Either<_i15.DataException, _i16.Country>
            >.value(
              _i17.dummyValue<_i14.Either<_i15.DataException, _i16.Country>>(
                this,
                Invocation.method(#getCountryDetails, [iso2]),
              ),
            ),
          )
          as _i13.Future<_i14.Either<_i15.DataException, _i16.Country>>);
}

/// A class which mocks [FlutterSecureStorage].
///
/// See the documentation for Mockito's code generation for more information.
class MockFlutterSecureStorage extends _i1.Mock
    implements _i6.FlutterSecureStorage {
  @override
  _i6.IOSOptions get iOptions =>
      (super.noSuchMethod(
            Invocation.getter(#iOptions),
            returnValue: _FakeIOSOptions_4(this, Invocation.getter(#iOptions)),
            returnValueForMissingStub: _FakeIOSOptions_4(
              this,
              Invocation.getter(#iOptions),
            ),
          )
          as _i6.IOSOptions);

  @override
  _i6.AndroidOptions get aOptions =>
      (super.noSuchMethod(
            Invocation.getter(#aOptions),
            returnValue: _FakeAndroidOptions_5(
              this,
              Invocation.getter(#aOptions),
            ),
            returnValueForMissingStub: _FakeAndroidOptions_5(
              this,
              Invocation.getter(#aOptions),
            ),
          )
          as _i6.AndroidOptions);

  @override
  _i6.LinuxOptions get lOptions =>
      (super.noSuchMethod(
            Invocation.getter(#lOptions),
            returnValue: _FakeLinuxOptions_6(
              this,
              Invocation.getter(#lOptions),
            ),
            returnValueForMissingStub: _FakeLinuxOptions_6(
              this,
              Invocation.getter(#lOptions),
            ),
          )
          as _i6.LinuxOptions);

  @override
  _i6.WindowsOptions get wOptions =>
      (super.noSuchMethod(
            Invocation.getter(#wOptions),
            returnValue: _FakeWindowsOptions_7(
              this,
              Invocation.getter(#wOptions),
            ),
            returnValueForMissingStub: _FakeWindowsOptions_7(
              this,
              Invocation.getter(#wOptions),
            ),
          )
          as _i6.WindowsOptions);

  @override
  _i6.WebOptions get webOptions =>
      (super.noSuchMethod(
            Invocation.getter(#webOptions),
            returnValue: _FakeWebOptions_8(
              this,
              Invocation.getter(#webOptions),
            ),
            returnValueForMissingStub: _FakeWebOptions_8(
              this,
              Invocation.getter(#webOptions),
            ),
          )
          as _i6.WebOptions);

  @override
  _i6.MacOsOptions get mOptions =>
      (super.noSuchMethod(
            Invocation.getter(#mOptions),
            returnValue: _FakeMacOsOptions_9(
              this,
              Invocation.getter(#mOptions),
            ),
            returnValueForMissingStub: _FakeMacOsOptions_9(
              this,
              Invocation.getter(#mOptions),
            ),
          )
          as _i6.MacOsOptions);

  @override
  void registerListener({
    required String? key,
    required _i9.ValueChanged<String?>? listener,
  }) => super.noSuchMethod(
    Invocation.method(#registerListener, [], {#key: key, #listener: listener}),
    returnValueForMissingStub: null,
  );

  @override
  void unregisterListener({
    required String? key,
    required _i9.ValueChanged<String?>? listener,
  }) => super.noSuchMethod(
    Invocation.method(#unregisterListener, [], {
      #key: key,
      #listener: listener,
    }),
    returnValueForMissingStub: null,
  );

  @override
  void unregisterAllListenersForKey({required String? key}) =>
      super.noSuchMethod(
        Invocation.method(#unregisterAllListenersForKey, [], {#key: key}),
        returnValueForMissingStub: null,
      );

  @override
  void unregisterAllListeners() => super.noSuchMethod(
    Invocation.method(#unregisterAllListeners, []),
    returnValueForMissingStub: null,
  );

  @override
  _i13.Future<void> write({
    required String? key,
    required String? value,
    _i6.IOSOptions? iOptions,
    _i6.AndroidOptions? aOptions,
    _i6.LinuxOptions? lOptions,
    _i6.WebOptions? webOptions,
    _i6.MacOsOptions? mOptions,
    _i6.WindowsOptions? wOptions,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#write, [], {
              #key: key,
              #value: value,
              #iOptions: iOptions,
              #aOptions: aOptions,
              #lOptions: lOptions,
              #webOptions: webOptions,
              #mOptions: mOptions,
              #wOptions: wOptions,
            }),
            returnValue: _i13.Future<void>.value(),
            returnValueForMissingStub: _i13.Future<void>.value(),
          )
          as _i13.Future<void>);

  @override
  _i13.Future<String?> read({
    required String? key,
    _i6.IOSOptions? iOptions,
    _i6.AndroidOptions? aOptions,
    _i6.LinuxOptions? lOptions,
    _i6.WebOptions? webOptions,
    _i6.MacOsOptions? mOptions,
    _i6.WindowsOptions? wOptions,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#read, [], {
              #key: key,
              #iOptions: iOptions,
              #aOptions: aOptions,
              #lOptions: lOptions,
              #webOptions: webOptions,
              #mOptions: mOptions,
              #wOptions: wOptions,
            }),
            returnValue: _i13.Future<String?>.value(),
            returnValueForMissingStub: _i13.Future<String?>.value(),
          )
          as _i13.Future<String?>);

  @override
  _i13.Future<bool> containsKey({
    required String? key,
    _i6.IOSOptions? iOptions,
    _i6.AndroidOptions? aOptions,
    _i6.LinuxOptions? lOptions,
    _i6.WebOptions? webOptions,
    _i6.MacOsOptions? mOptions,
    _i6.WindowsOptions? wOptions,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#containsKey, [], {
              #key: key,
              #iOptions: iOptions,
              #aOptions: aOptions,
              #lOptions: lOptions,
              #webOptions: webOptions,
              #mOptions: mOptions,
              #wOptions: wOptions,
            }),
            returnValue: _i13.Future<bool>.value(false),
            returnValueForMissingStub: _i13.Future<bool>.value(false),
          )
          as _i13.Future<bool>);

  @override
  _i13.Future<void> delete({
    required String? key,
    _i6.IOSOptions? iOptions,
    _i6.AndroidOptions? aOptions,
    _i6.LinuxOptions? lOptions,
    _i6.WebOptions? webOptions,
    _i6.MacOsOptions? mOptions,
    _i6.WindowsOptions? wOptions,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#delete, [], {
              #key: key,
              #iOptions: iOptions,
              #aOptions: aOptions,
              #lOptions: lOptions,
              #webOptions: webOptions,
              #mOptions: mOptions,
              #wOptions: wOptions,
            }),
            returnValue: _i13.Future<void>.value(),
            returnValueForMissingStub: _i13.Future<void>.value(),
          )
          as _i13.Future<void>);

  @override
  _i13.Future<Map<String, String>> readAll({
    _i6.IOSOptions? iOptions,
    _i6.AndroidOptions? aOptions,
    _i6.LinuxOptions? lOptions,
    _i6.WebOptions? webOptions,
    _i6.MacOsOptions? mOptions,
    _i6.WindowsOptions? wOptions,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#readAll, [], {
              #iOptions: iOptions,
              #aOptions: aOptions,
              #lOptions: lOptions,
              #webOptions: webOptions,
              #mOptions: mOptions,
              #wOptions: wOptions,
            }),
            returnValue: _i13.Future<Map<String, String>>.value(
              <String, String>{},
            ),
            returnValueForMissingStub: _i13.Future<Map<String, String>>.value(
              <String, String>{},
            ),
          )
          as _i13.Future<Map<String, String>>);

  @override
  _i13.Future<void> deleteAll({
    _i6.IOSOptions? iOptions,
    _i6.AndroidOptions? aOptions,
    _i6.LinuxOptions? lOptions,
    _i6.WebOptions? webOptions,
    _i6.MacOsOptions? mOptions,
    _i6.WindowsOptions? wOptions,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#deleteAll, [], {
              #iOptions: iOptions,
              #aOptions: aOptions,
              #lOptions: lOptions,
              #webOptions: webOptions,
              #mOptions: mOptions,
              #wOptions: wOptions,
            }),
            returnValue: _i13.Future<void>.value(),
            returnValueForMissingStub: _i13.Future<void>.value(),
          )
          as _i13.Future<void>);

  @override
  _i13.Future<bool?> isCupertinoProtectedDataAvailable() =>
      (super.noSuchMethod(
            Invocation.method(#isCupertinoProtectedDataAvailable, []),
            returnValue: _i13.Future<bool?>.value(),
            returnValueForMissingStub: _i13.Future<bool?>.value(),
          )
          as _i13.Future<bool?>);
}

/// A class which mocks [SecureStorage].
///
/// See the documentation for Mockito's code generation for more information.
class MockSecureStorage extends _i1.Mock implements _i23.SecureStorage {
  @override
  _i13.Future<void> saveLocationApiKey(String? value) =>
      (super.noSuchMethod(
            Invocation.method(#saveLocationApiKey, [value]),
            returnValue: _i13.Future<void>.value(),
            returnValueForMissingStub: _i13.Future<void>.value(),
          )
          as _i13.Future<void>);

  @override
  _i13.Future<void> saveWeatherApiKey(String? value) =>
      (super.noSuchMethod(
            Invocation.method(#saveWeatherApiKey, [value]),
            returnValue: _i13.Future<void>.value(),
            returnValueForMissingStub: _i13.Future<void>.value(),
          )
          as _i13.Future<void>);

  @override
  _i13.Future<String?> getLocationApiKey() =>
      (super.noSuchMethod(
            Invocation.method(#getLocationApiKey, []),
            returnValue: _i13.Future<String?>.value(),
            returnValueForMissingStub: _i13.Future<String?>.value(),
          )
          as _i13.Future<String?>);

  @override
  _i13.Future<String?> getWeatherApiKey() =>
      (super.noSuchMethod(
            Invocation.method(#getWeatherApiKey, []),
            returnValue: _i13.Future<String?>.value(),
            returnValueForMissingStub: _i13.Future<String?>.value(),
          )
          as _i13.Future<String?>);

  @override
  _i13.Future<void> deleteLocationApiKey() =>
      (super.noSuchMethod(
            Invocation.method(#deleteLocationApiKey, []),
            returnValue: _i13.Future<void>.value(),
            returnValueForMissingStub: _i13.Future<void>.value(),
          )
          as _i13.Future<void>);

  @override
  _i13.Future<void> deleteWeatherApiKey() =>
      (super.noSuchMethod(
            Invocation.method(#deleteWeatherApiKey, []),
            returnValue: _i13.Future<void>.value(),
            returnValueForMissingStub: _i13.Future<void>.value(),
          )
          as _i13.Future<void>);

  @override
  _i13.Future<void> deleteAll() =>
      (super.noSuchMethod(
            Invocation.method(#deleteAll, []),
            returnValue: _i13.Future<void>.value(),
            returnValueForMissingStub: _i13.Future<void>.value(),
          )
          as _i13.Future<void>);
}

/// A class which mocks [Dio].
///
/// See the documentation for Mockito's code generation for more information.
class MockDio extends _i1.Mock implements _i2.Dio {
  @override
  _i2.BaseOptions get options =>
      (super.noSuchMethod(
            Invocation.getter(#options),
            returnValue: _FakeBaseOptions_10(this, Invocation.getter(#options)),
            returnValueForMissingStub: _FakeBaseOptions_10(
              this,
              Invocation.getter(#options),
            ),
          )
          as _i2.BaseOptions);

  @override
  set options(_i2.BaseOptions? _options) => super.noSuchMethod(
    Invocation.setter(#options, _options),
    returnValueForMissingStub: null,
  );

  @override
  _i2.HttpClientAdapter get httpClientAdapter =>
      (super.noSuchMethod(
            Invocation.getter(#httpClientAdapter),
            returnValue: _FakeHttpClientAdapter_11(
              this,
              Invocation.getter(#httpClientAdapter),
            ),
            returnValueForMissingStub: _FakeHttpClientAdapter_11(
              this,
              Invocation.getter(#httpClientAdapter),
            ),
          )
          as _i2.HttpClientAdapter);

  @override
  set httpClientAdapter(_i2.HttpClientAdapter? _httpClientAdapter) =>
      super.noSuchMethod(
        Invocation.setter(#httpClientAdapter, _httpClientAdapter),
        returnValueForMissingStub: null,
      );

  @override
  _i2.Transformer get transformer =>
      (super.noSuchMethod(
            Invocation.getter(#transformer),
            returnValue: _FakeTransformer_12(
              this,
              Invocation.getter(#transformer),
            ),
            returnValueForMissingStub: _FakeTransformer_12(
              this,
              Invocation.getter(#transformer),
            ),
          )
          as _i2.Transformer);

  @override
  set transformer(_i2.Transformer? _transformer) => super.noSuchMethod(
    Invocation.setter(#transformer, _transformer),
    returnValueForMissingStub: null,
  );

  @override
  _i2.Interceptors get interceptors =>
      (super.noSuchMethod(
            Invocation.getter(#interceptors),
            returnValue: _FakeInterceptors_13(
              this,
              Invocation.getter(#interceptors),
            ),
            returnValueForMissingStub: _FakeInterceptors_13(
              this,
              Invocation.getter(#interceptors),
            ),
          )
          as _i2.Interceptors);

  @override
  void close({bool? force = false}) => super.noSuchMethod(
    Invocation.method(#close, [], {#force: force}),
    returnValueForMissingStub: null,
  );

  @override
  _i13.Future<_i2.Response<T>> head<T>(
    String? path, {
    Object? data,
    Map<String, dynamic>? queryParameters,
    _i2.Options? options,
    _i2.CancelToken? cancelToken,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #head,
              [path],
              {
                #data: data,
                #queryParameters: queryParameters,
                #options: options,
                #cancelToken: cancelToken,
              },
            ),
            returnValue: _i13.Future<_i2.Response<T>>.value(
              _FakeResponse_0<T>(
                this,
                Invocation.method(
                  #head,
                  [path],
                  {
                    #data: data,
                    #queryParameters: queryParameters,
                    #options: options,
                    #cancelToken: cancelToken,
                  },
                ),
              ),
            ),
            returnValueForMissingStub: _i13.Future<_i2.Response<T>>.value(
              _FakeResponse_0<T>(
                this,
                Invocation.method(
                  #head,
                  [path],
                  {
                    #data: data,
                    #queryParameters: queryParameters,
                    #options: options,
                    #cancelToken: cancelToken,
                  },
                ),
              ),
            ),
          )
          as _i13.Future<_i2.Response<T>>);

  @override
  _i13.Future<_i2.Response<T>> headUri<T>(
    Uri? uri, {
    Object? data,
    _i2.Options? options,
    _i2.CancelToken? cancelToken,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #headUri,
              [uri],
              {#data: data, #options: options, #cancelToken: cancelToken},
            ),
            returnValue: _i13.Future<_i2.Response<T>>.value(
              _FakeResponse_0<T>(
                this,
                Invocation.method(
                  #headUri,
                  [uri],
                  {#data: data, #options: options, #cancelToken: cancelToken},
                ),
              ),
            ),
            returnValueForMissingStub: _i13.Future<_i2.Response<T>>.value(
              _FakeResponse_0<T>(
                this,
                Invocation.method(
                  #headUri,
                  [uri],
                  {#data: data, #options: options, #cancelToken: cancelToken},
                ),
              ),
            ),
          )
          as _i13.Future<_i2.Response<T>>);

  @override
  _i13.Future<_i2.Response<T>> get<T>(
    String? path, {
    Object? data,
    Map<String, dynamic>? queryParameters,
    _i2.Options? options,
    _i2.CancelToken? cancelToken,
    _i2.ProgressCallback? onReceiveProgress,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #get,
              [path],
              {
                #data: data,
                #queryParameters: queryParameters,
                #options: options,
                #cancelToken: cancelToken,
                #onReceiveProgress: onReceiveProgress,
              },
            ),
            returnValue: _i13.Future<_i2.Response<T>>.value(
              _FakeResponse_0<T>(
                this,
                Invocation.method(
                  #get,
                  [path],
                  {
                    #data: data,
                    #queryParameters: queryParameters,
                    #options: options,
                    #cancelToken: cancelToken,
                    #onReceiveProgress: onReceiveProgress,
                  },
                ),
              ),
            ),
            returnValueForMissingStub: _i13.Future<_i2.Response<T>>.value(
              _FakeResponse_0<T>(
                this,
                Invocation.method(
                  #get,
                  [path],
                  {
                    #data: data,
                    #queryParameters: queryParameters,
                    #options: options,
                    #cancelToken: cancelToken,
                    #onReceiveProgress: onReceiveProgress,
                  },
                ),
              ),
            ),
          )
          as _i13.Future<_i2.Response<T>>);

  @override
  _i13.Future<_i2.Response<T>> getUri<T>(
    Uri? uri, {
    Object? data,
    _i2.Options? options,
    _i2.CancelToken? cancelToken,
    _i2.ProgressCallback? onReceiveProgress,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #getUri,
              [uri],
              {
                #data: data,
                #options: options,
                #cancelToken: cancelToken,
                #onReceiveProgress: onReceiveProgress,
              },
            ),
            returnValue: _i13.Future<_i2.Response<T>>.value(
              _FakeResponse_0<T>(
                this,
                Invocation.method(
                  #getUri,
                  [uri],
                  {
                    #data: data,
                    #options: options,
                    #cancelToken: cancelToken,
                    #onReceiveProgress: onReceiveProgress,
                  },
                ),
              ),
            ),
            returnValueForMissingStub: _i13.Future<_i2.Response<T>>.value(
              _FakeResponse_0<T>(
                this,
                Invocation.method(
                  #getUri,
                  [uri],
                  {
                    #data: data,
                    #options: options,
                    #cancelToken: cancelToken,
                    #onReceiveProgress: onReceiveProgress,
                  },
                ),
              ),
            ),
          )
          as _i13.Future<_i2.Response<T>>);

  @override
  _i13.Future<_i2.Response<T>> post<T>(
    String? path, {
    Object? data,
    Map<String, dynamic>? queryParameters,
    _i2.Options? options,
    _i2.CancelToken? cancelToken,
    _i2.ProgressCallback? onSendProgress,
    _i2.ProgressCallback? onReceiveProgress,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #post,
              [path],
              {
                #data: data,
                #queryParameters: queryParameters,
                #options: options,
                #cancelToken: cancelToken,
                #onSendProgress: onSendProgress,
                #onReceiveProgress: onReceiveProgress,
              },
            ),
            returnValue: _i13.Future<_i2.Response<T>>.value(
              _FakeResponse_0<T>(
                this,
                Invocation.method(
                  #post,
                  [path],
                  {
                    #data: data,
                    #queryParameters: queryParameters,
                    #options: options,
                    #cancelToken: cancelToken,
                    #onSendProgress: onSendProgress,
                    #onReceiveProgress: onReceiveProgress,
                  },
                ),
              ),
            ),
            returnValueForMissingStub: _i13.Future<_i2.Response<T>>.value(
              _FakeResponse_0<T>(
                this,
                Invocation.method(
                  #post,
                  [path],
                  {
                    #data: data,
                    #queryParameters: queryParameters,
                    #options: options,
                    #cancelToken: cancelToken,
                    #onSendProgress: onSendProgress,
                    #onReceiveProgress: onReceiveProgress,
                  },
                ),
              ),
            ),
          )
          as _i13.Future<_i2.Response<T>>);

  @override
  _i13.Future<_i2.Response<T>> postUri<T>(
    Uri? uri, {
    Object? data,
    _i2.Options? options,
    _i2.CancelToken? cancelToken,
    _i2.ProgressCallback? onSendProgress,
    _i2.ProgressCallback? onReceiveProgress,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #postUri,
              [uri],
              {
                #data: data,
                #options: options,
                #cancelToken: cancelToken,
                #onSendProgress: onSendProgress,
                #onReceiveProgress: onReceiveProgress,
              },
            ),
            returnValue: _i13.Future<_i2.Response<T>>.value(
              _FakeResponse_0<T>(
                this,
                Invocation.method(
                  #postUri,
                  [uri],
                  {
                    #data: data,
                    #options: options,
                    #cancelToken: cancelToken,
                    #onSendProgress: onSendProgress,
                    #onReceiveProgress: onReceiveProgress,
                  },
                ),
              ),
            ),
            returnValueForMissingStub: _i13.Future<_i2.Response<T>>.value(
              _FakeResponse_0<T>(
                this,
                Invocation.method(
                  #postUri,
                  [uri],
                  {
                    #data: data,
                    #options: options,
                    #cancelToken: cancelToken,
                    #onSendProgress: onSendProgress,
                    #onReceiveProgress: onReceiveProgress,
                  },
                ),
              ),
            ),
          )
          as _i13.Future<_i2.Response<T>>);

  @override
  _i13.Future<_i2.Response<T>> put<T>(
    String? path, {
    Object? data,
    Map<String, dynamic>? queryParameters,
    _i2.Options? options,
    _i2.CancelToken? cancelToken,
    _i2.ProgressCallback? onSendProgress,
    _i2.ProgressCallback? onReceiveProgress,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #put,
              [path],
              {
                #data: data,
                #queryParameters: queryParameters,
                #options: options,
                #cancelToken: cancelToken,
                #onSendProgress: onSendProgress,
                #onReceiveProgress: onReceiveProgress,
              },
            ),
            returnValue: _i13.Future<_i2.Response<T>>.value(
              _FakeResponse_0<T>(
                this,
                Invocation.method(
                  #put,
                  [path],
                  {
                    #data: data,
                    #queryParameters: queryParameters,
                    #options: options,
                    #cancelToken: cancelToken,
                    #onSendProgress: onSendProgress,
                    #onReceiveProgress: onReceiveProgress,
                  },
                ),
              ),
            ),
            returnValueForMissingStub: _i13.Future<_i2.Response<T>>.value(
              _FakeResponse_0<T>(
                this,
                Invocation.method(
                  #put,
                  [path],
                  {
                    #data: data,
                    #queryParameters: queryParameters,
                    #options: options,
                    #cancelToken: cancelToken,
                    #onSendProgress: onSendProgress,
                    #onReceiveProgress: onReceiveProgress,
                  },
                ),
              ),
            ),
          )
          as _i13.Future<_i2.Response<T>>);

  @override
  _i13.Future<_i2.Response<T>> putUri<T>(
    Uri? uri, {
    Object? data,
    _i2.Options? options,
    _i2.CancelToken? cancelToken,
    _i2.ProgressCallback? onSendProgress,
    _i2.ProgressCallback? onReceiveProgress,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #putUri,
              [uri],
              {
                #data: data,
                #options: options,
                #cancelToken: cancelToken,
                #onSendProgress: onSendProgress,
                #onReceiveProgress: onReceiveProgress,
              },
            ),
            returnValue: _i13.Future<_i2.Response<T>>.value(
              _FakeResponse_0<T>(
                this,
                Invocation.method(
                  #putUri,
                  [uri],
                  {
                    #data: data,
                    #options: options,
                    #cancelToken: cancelToken,
                    #onSendProgress: onSendProgress,
                    #onReceiveProgress: onReceiveProgress,
                  },
                ),
              ),
            ),
            returnValueForMissingStub: _i13.Future<_i2.Response<T>>.value(
              _FakeResponse_0<T>(
                this,
                Invocation.method(
                  #putUri,
                  [uri],
                  {
                    #data: data,
                    #options: options,
                    #cancelToken: cancelToken,
                    #onSendProgress: onSendProgress,
                    #onReceiveProgress: onReceiveProgress,
                  },
                ),
              ),
            ),
          )
          as _i13.Future<_i2.Response<T>>);

  @override
  _i13.Future<_i2.Response<T>> patch<T>(
    String? path, {
    Object? data,
    Map<String, dynamic>? queryParameters,
    _i2.Options? options,
    _i2.CancelToken? cancelToken,
    _i2.ProgressCallback? onSendProgress,
    _i2.ProgressCallback? onReceiveProgress,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #patch,
              [path],
              {
                #data: data,
                #queryParameters: queryParameters,
                #options: options,
                #cancelToken: cancelToken,
                #onSendProgress: onSendProgress,
                #onReceiveProgress: onReceiveProgress,
              },
            ),
            returnValue: _i13.Future<_i2.Response<T>>.value(
              _FakeResponse_0<T>(
                this,
                Invocation.method(
                  #patch,
                  [path],
                  {
                    #data: data,
                    #queryParameters: queryParameters,
                    #options: options,
                    #cancelToken: cancelToken,
                    #onSendProgress: onSendProgress,
                    #onReceiveProgress: onReceiveProgress,
                  },
                ),
              ),
            ),
            returnValueForMissingStub: _i13.Future<_i2.Response<T>>.value(
              _FakeResponse_0<T>(
                this,
                Invocation.method(
                  #patch,
                  [path],
                  {
                    #data: data,
                    #queryParameters: queryParameters,
                    #options: options,
                    #cancelToken: cancelToken,
                    #onSendProgress: onSendProgress,
                    #onReceiveProgress: onReceiveProgress,
                  },
                ),
              ),
            ),
          )
          as _i13.Future<_i2.Response<T>>);

  @override
  _i13.Future<_i2.Response<T>> patchUri<T>(
    Uri? uri, {
    Object? data,
    _i2.Options? options,
    _i2.CancelToken? cancelToken,
    _i2.ProgressCallback? onSendProgress,
    _i2.ProgressCallback? onReceiveProgress,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #patchUri,
              [uri],
              {
                #data: data,
                #options: options,
                #cancelToken: cancelToken,
                #onSendProgress: onSendProgress,
                #onReceiveProgress: onReceiveProgress,
              },
            ),
            returnValue: _i13.Future<_i2.Response<T>>.value(
              _FakeResponse_0<T>(
                this,
                Invocation.method(
                  #patchUri,
                  [uri],
                  {
                    #data: data,
                    #options: options,
                    #cancelToken: cancelToken,
                    #onSendProgress: onSendProgress,
                    #onReceiveProgress: onReceiveProgress,
                  },
                ),
              ),
            ),
            returnValueForMissingStub: _i13.Future<_i2.Response<T>>.value(
              _FakeResponse_0<T>(
                this,
                Invocation.method(
                  #patchUri,
                  [uri],
                  {
                    #data: data,
                    #options: options,
                    #cancelToken: cancelToken,
                    #onSendProgress: onSendProgress,
                    #onReceiveProgress: onReceiveProgress,
                  },
                ),
              ),
            ),
          )
          as _i13.Future<_i2.Response<T>>);

  @override
  _i13.Future<_i2.Response<T>> delete<T>(
    String? path, {
    Object? data,
    Map<String, dynamic>? queryParameters,
    _i2.Options? options,
    _i2.CancelToken? cancelToken,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #delete,
              [path],
              {
                #data: data,
                #queryParameters: queryParameters,
                #options: options,
                #cancelToken: cancelToken,
              },
            ),
            returnValue: _i13.Future<_i2.Response<T>>.value(
              _FakeResponse_0<T>(
                this,
                Invocation.method(
                  #delete,
                  [path],
                  {
                    #data: data,
                    #queryParameters: queryParameters,
                    #options: options,
                    #cancelToken: cancelToken,
                  },
                ),
              ),
            ),
            returnValueForMissingStub: _i13.Future<_i2.Response<T>>.value(
              _FakeResponse_0<T>(
                this,
                Invocation.method(
                  #delete,
                  [path],
                  {
                    #data: data,
                    #queryParameters: queryParameters,
                    #options: options,
                    #cancelToken: cancelToken,
                  },
                ),
              ),
            ),
          )
          as _i13.Future<_i2.Response<T>>);

  @override
  _i13.Future<_i2.Response<T>> deleteUri<T>(
    Uri? uri, {
    Object? data,
    _i2.Options? options,
    _i2.CancelToken? cancelToken,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #deleteUri,
              [uri],
              {#data: data, #options: options, #cancelToken: cancelToken},
            ),
            returnValue: _i13.Future<_i2.Response<T>>.value(
              _FakeResponse_0<T>(
                this,
                Invocation.method(
                  #deleteUri,
                  [uri],
                  {#data: data, #options: options, #cancelToken: cancelToken},
                ),
              ),
            ),
            returnValueForMissingStub: _i13.Future<_i2.Response<T>>.value(
              _FakeResponse_0<T>(
                this,
                Invocation.method(
                  #deleteUri,
                  [uri],
                  {#data: data, #options: options, #cancelToken: cancelToken},
                ),
              ),
            ),
          )
          as _i13.Future<_i2.Response<T>>);

  @override
  _i13.Future<_i2.Response<dynamic>> download(
    String? urlPath,
    dynamic savePath, {
    _i2.ProgressCallback? onReceiveProgress,
    Map<String, dynamic>? queryParameters,
    _i2.CancelToken? cancelToken,
    bool? deleteOnError = true,
    _i2.FileAccessMode? fileAccessMode = _i2.FileAccessMode.write,
    String? lengthHeader = 'content-length',
    Object? data,
    _i2.Options? options,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #download,
              [urlPath, savePath],
              {
                #onReceiveProgress: onReceiveProgress,
                #queryParameters: queryParameters,
                #cancelToken: cancelToken,
                #deleteOnError: deleteOnError,
                #fileAccessMode: fileAccessMode,
                #lengthHeader: lengthHeader,
                #data: data,
                #options: options,
              },
            ),
            returnValue: _i13.Future<_i2.Response<dynamic>>.value(
              _FakeResponse_0<dynamic>(
                this,
                Invocation.method(
                  #download,
                  [urlPath, savePath],
                  {
                    #onReceiveProgress: onReceiveProgress,
                    #queryParameters: queryParameters,
                    #cancelToken: cancelToken,
                    #deleteOnError: deleteOnError,
                    #fileAccessMode: fileAccessMode,
                    #lengthHeader: lengthHeader,
                    #data: data,
                    #options: options,
                  },
                ),
              ),
            ),
            returnValueForMissingStub: _i13.Future<_i2.Response<dynamic>>.value(
              _FakeResponse_0<dynamic>(
                this,
                Invocation.method(
                  #download,
                  [urlPath, savePath],
                  {
                    #onReceiveProgress: onReceiveProgress,
                    #queryParameters: queryParameters,
                    #cancelToken: cancelToken,
                    #deleteOnError: deleteOnError,
                    #fileAccessMode: fileAccessMode,
                    #lengthHeader: lengthHeader,
                    #data: data,
                    #options: options,
                  },
                ),
              ),
            ),
          )
          as _i13.Future<_i2.Response<dynamic>>);

  @override
  _i13.Future<_i2.Response<dynamic>> downloadUri(
    Uri? uri,
    dynamic savePath, {
    _i2.ProgressCallback? onReceiveProgress,
    _i2.CancelToken? cancelToken,
    bool? deleteOnError = true,
    _i2.FileAccessMode? fileAccessMode = _i2.FileAccessMode.write,
    String? lengthHeader = 'content-length',
    Object? data,
    _i2.Options? options,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #downloadUri,
              [uri, savePath],
              {
                #onReceiveProgress: onReceiveProgress,
                #cancelToken: cancelToken,
                #deleteOnError: deleteOnError,
                #fileAccessMode: fileAccessMode,
                #lengthHeader: lengthHeader,
                #data: data,
                #options: options,
              },
            ),
            returnValue: _i13.Future<_i2.Response<dynamic>>.value(
              _FakeResponse_0<dynamic>(
                this,
                Invocation.method(
                  #downloadUri,
                  [uri, savePath],
                  {
                    #onReceiveProgress: onReceiveProgress,
                    #cancelToken: cancelToken,
                    #deleteOnError: deleteOnError,
                    #fileAccessMode: fileAccessMode,
                    #lengthHeader: lengthHeader,
                    #data: data,
                    #options: options,
                  },
                ),
              ),
            ),
            returnValueForMissingStub: _i13.Future<_i2.Response<dynamic>>.value(
              _FakeResponse_0<dynamic>(
                this,
                Invocation.method(
                  #downloadUri,
                  [uri, savePath],
                  {
                    #onReceiveProgress: onReceiveProgress,
                    #cancelToken: cancelToken,
                    #deleteOnError: deleteOnError,
                    #fileAccessMode: fileAccessMode,
                    #lengthHeader: lengthHeader,
                    #data: data,
                    #options: options,
                  },
                ),
              ),
            ),
          )
          as _i13.Future<_i2.Response<dynamic>>);

  @override
  _i13.Future<_i2.Response<T>> request<T>(
    String? url, {
    Object? data,
    Map<String, dynamic>? queryParameters,
    _i2.CancelToken? cancelToken,
    _i2.Options? options,
    _i2.ProgressCallback? onSendProgress,
    _i2.ProgressCallback? onReceiveProgress,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #request,
              [url],
              {
                #data: data,
                #queryParameters: queryParameters,
                #cancelToken: cancelToken,
                #options: options,
                #onSendProgress: onSendProgress,
                #onReceiveProgress: onReceiveProgress,
              },
            ),
            returnValue: _i13.Future<_i2.Response<T>>.value(
              _FakeResponse_0<T>(
                this,
                Invocation.method(
                  #request,
                  [url],
                  {
                    #data: data,
                    #queryParameters: queryParameters,
                    #cancelToken: cancelToken,
                    #options: options,
                    #onSendProgress: onSendProgress,
                    #onReceiveProgress: onReceiveProgress,
                  },
                ),
              ),
            ),
            returnValueForMissingStub: _i13.Future<_i2.Response<T>>.value(
              _FakeResponse_0<T>(
                this,
                Invocation.method(
                  #request,
                  [url],
                  {
                    #data: data,
                    #queryParameters: queryParameters,
                    #cancelToken: cancelToken,
                    #options: options,
                    #onSendProgress: onSendProgress,
                    #onReceiveProgress: onReceiveProgress,
                  },
                ),
              ),
            ),
          )
          as _i13.Future<_i2.Response<T>>);

  @override
  _i13.Future<_i2.Response<T>> requestUri<T>(
    Uri? uri, {
    Object? data,
    _i2.CancelToken? cancelToken,
    _i2.Options? options,
    _i2.ProgressCallback? onSendProgress,
    _i2.ProgressCallback? onReceiveProgress,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #requestUri,
              [uri],
              {
                #data: data,
                #cancelToken: cancelToken,
                #options: options,
                #onSendProgress: onSendProgress,
                #onReceiveProgress: onReceiveProgress,
              },
            ),
            returnValue: _i13.Future<_i2.Response<T>>.value(
              _FakeResponse_0<T>(
                this,
                Invocation.method(
                  #requestUri,
                  [uri],
                  {
                    #data: data,
                    #cancelToken: cancelToken,
                    #options: options,
                    #onSendProgress: onSendProgress,
                    #onReceiveProgress: onReceiveProgress,
                  },
                ),
              ),
            ),
            returnValueForMissingStub: _i13.Future<_i2.Response<T>>.value(
              _FakeResponse_0<T>(
                this,
                Invocation.method(
                  #requestUri,
                  [uri],
                  {
                    #data: data,
                    #cancelToken: cancelToken,
                    #options: options,
                    #onSendProgress: onSendProgress,
                    #onReceiveProgress: onReceiveProgress,
                  },
                ),
              ),
            ),
          )
          as _i13.Future<_i2.Response<T>>);

  @override
  _i13.Future<_i2.Response<T>> fetch<T>(_i2.RequestOptions? requestOptions) =>
      (super.noSuchMethod(
            Invocation.method(#fetch, [requestOptions]),
            returnValue: _i13.Future<_i2.Response<T>>.value(
              _FakeResponse_0<T>(
                this,
                Invocation.method(#fetch, [requestOptions]),
              ),
            ),
            returnValueForMissingStub: _i13.Future<_i2.Response<T>>.value(
              _FakeResponse_0<T>(
                this,
                Invocation.method(#fetch, [requestOptions]),
              ),
            ),
          )
          as _i13.Future<_i2.Response<T>>);

  @override
  _i2.Dio clone({
    _i2.BaseOptions? options,
    _i2.Interceptors? interceptors,
    _i2.HttpClientAdapter? httpClientAdapter,
    _i2.Transformer? transformer,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#clone, [], {
              #options: options,
              #interceptors: interceptors,
              #httpClientAdapter: httpClientAdapter,
              #transformer: transformer,
            }),
            returnValue: _FakeDio_14(
              this,
              Invocation.method(#clone, [], {
                #options: options,
                #interceptors: interceptors,
                #httpClientAdapter: httpClientAdapter,
                #transformer: transformer,
              }),
            ),
            returnValueForMissingStub: _FakeDio_14(
              this,
              Invocation.method(#clone, [], {
                #options: options,
                #interceptors: interceptors,
                #httpClientAdapter: httpClientAdapter,
                #transformer: transformer,
              }),
            ),
          )
          as _i2.Dio);
}

/// A class which mocks [LocationBloc].
///
/// See the documentation for Mockito's code generation for more information.
class MockLocationBloc extends _i1.Mock implements _i24.LocationBloc {
  @override
  _i7.LocationState get state =>
      (super.noSuchMethod(
            Invocation.getter(#state),
            returnValue: _FakeLocationState_15(this, Invocation.getter(#state)),
            returnValueForMissingStub: _FakeLocationState_15(
              this,
              Invocation.getter(#state),
            ),
          )
          as _i7.LocationState);

  @override
  _i13.Stream<_i7.LocationState> get stream =>
      (super.noSuchMethod(
            Invocation.getter(#stream),
            returnValue: _i13.Stream<_i7.LocationState>.empty(),
            returnValueForMissingStub: _i13.Stream<_i7.LocationState>.empty(),
          )
          as _i13.Stream<_i7.LocationState>);

  @override
  bool get isClosed =>
      (super.noSuchMethod(
            Invocation.getter(#isClosed),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  void getCountries() => super.noSuchMethod(
    Invocation.method(#getCountries, []),
    returnValueForMissingStub: null,
  );

  @override
  void onCountrySelected(_i16.Country? country) => super.noSuchMethod(
    Invocation.method(#onCountrySelected, [country]),
    returnValueForMissingStub: null,
  );

  @override
  void getCountryDetails(String? iso2) => super.noSuchMethod(
    Invocation.method(#getCountryDetails, [iso2]),
    returnValueForMissingStub: null,
  );

  @override
  void searchCountries(String? query) => super.noSuchMethod(
    Invocation.method(#searchCountries, [query]),
    returnValueForMissingStub: null,
  );

  @override
  void clearSelections({bool? clearCountry = false}) => super.noSuchMethod(
    Invocation.method(#clearSelections, [], {#clearCountry: clearCountry}),
    returnValueForMissingStub: null,
  );

  @override
  void add(_i25.LocationEvent? event) => super.noSuchMethod(
    Invocation.method(#add, [event]),
    returnValueForMissingStub: null,
  );

  @override
  void onEvent(_i25.LocationEvent? event) => super.noSuchMethod(
    Invocation.method(#onEvent, [event]),
    returnValueForMissingStub: null,
  );

  @override
  void emit(_i7.LocationState? state) => super.noSuchMethod(
    Invocation.method(#emit, [state]),
    returnValueForMissingStub: null,
  );

  @override
  void on<E extends _i25.LocationEvent>(
    _i26.EventHandler<E, _i7.LocationState>? handler, {
    _i26.EventTransformer<E>? transformer,
  }) => super.noSuchMethod(
    Invocation.method(#on, [handler], {#transformer: transformer}),
    returnValueForMissingStub: null,
  );

  @override
  void onTransition(
    _i26.Transition<_i25.LocationEvent, _i7.LocationState>? transition,
  ) => super.noSuchMethod(
    Invocation.method(#onTransition, [transition]),
    returnValueForMissingStub: null,
  );

  @override
  _i13.Future<void> close() =>
      (super.noSuchMethod(
            Invocation.method(#close, []),
            returnValue: _i13.Future<void>.value(),
            returnValueForMissingStub: _i13.Future<void>.value(),
          )
          as _i13.Future<void>);

  @override
  void onChange(_i26.Change<_i7.LocationState>? change) => super.noSuchMethod(
    Invocation.method(#onChange, [change]),
    returnValueForMissingStub: null,
  );

  @override
  void addError(Object? error, [StackTrace? stackTrace]) => super.noSuchMethod(
    Invocation.method(#addError, [error, stackTrace]),
    returnValueForMissingStub: null,
  );

  @override
  void onError(Object? error, StackTrace? stackTrace) => super.noSuchMethod(
    Invocation.method(#onError, [error, stackTrace]),
    returnValueForMissingStub: null,
  );
}

/// A class which mocks [WeatherBloc].
///
/// See the documentation for Mockito's code generation for more information.
class MockWeatherBloc extends _i1.Mock implements _i27.WeatherBloc {
  @override
  _i8.WeatherState get state =>
      (super.noSuchMethod(
            Invocation.getter(#state),
            returnValue: _FakeWeatherState_16(this, Invocation.getter(#state)),
            returnValueForMissingStub: _FakeWeatherState_16(
              this,
              Invocation.getter(#state),
            ),
          )
          as _i8.WeatherState);

  @override
  _i13.Stream<_i8.WeatherState> get stream =>
      (super.noSuchMethod(
            Invocation.getter(#stream),
            returnValue: _i13.Stream<_i8.WeatherState>.empty(),
            returnValueForMissingStub: _i13.Stream<_i8.WeatherState>.empty(),
          )
          as _i13.Stream<_i8.WeatherState>);

  @override
  bool get isClosed =>
      (super.noSuchMethod(
            Invocation.getter(#isClosed),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  void getWeatherForLocation({
    required double? lat,
    required double? lon,
    String? units = 'metric',
  }) => super.noSuchMethod(
    Invocation.method(#getWeatherForLocation, [], {
      #lat: lat,
      #lon: lon,
      #units: units,
    }),
    returnValueForMissingStub: null,
  );

  @override
  void add(_i28.WeatherEvent? event) => super.noSuchMethod(
    Invocation.method(#add, [event]),
    returnValueForMissingStub: null,
  );

  @override
  void onEvent(_i28.WeatherEvent? event) => super.noSuchMethod(
    Invocation.method(#onEvent, [event]),
    returnValueForMissingStub: null,
  );

  @override
  void emit(_i8.WeatherState? state) => super.noSuchMethod(
    Invocation.method(#emit, [state]),
    returnValueForMissingStub: null,
  );

  @override
  void on<E extends _i28.WeatherEvent>(
    _i26.EventHandler<E, _i8.WeatherState>? handler, {
    _i26.EventTransformer<E>? transformer,
  }) => super.noSuchMethod(
    Invocation.method(#on, [handler], {#transformer: transformer}),
    returnValueForMissingStub: null,
  );

  @override
  void onTransition(
    _i26.Transition<_i28.WeatherEvent, _i8.WeatherState>? transition,
  ) => super.noSuchMethod(
    Invocation.method(#onTransition, [transition]),
    returnValueForMissingStub: null,
  );

  @override
  _i13.Future<void> close() =>
      (super.noSuchMethod(
            Invocation.method(#close, []),
            returnValue: _i13.Future<void>.value(),
            returnValueForMissingStub: _i13.Future<void>.value(),
          )
          as _i13.Future<void>);

  @override
  void onChange(_i26.Change<_i8.WeatherState>? change) => super.noSuchMethod(
    Invocation.method(#onChange, [change]),
    returnValueForMissingStub: null,
  );

  @override
  void addError(Object? error, [StackTrace? stackTrace]) => super.noSuchMethod(
    Invocation.method(#addError, [error, stackTrace]),
    returnValueForMissingStub: null,
  );

  @override
  void onError(Object? error, StackTrace? stackTrace) => super.noSuchMethod(
    Invocation.method(#onError, [error, stackTrace]),
    returnValueForMissingStub: null,
  );
}

/// A class which mocks [NavigatorState].
///
/// See the documentation for Mockito's code generation for more information.
class MockNavigatorState extends _i1.Mock implements _i9.NavigatorState {
  @override
  _i9.FocusNode get focusNode =>
      (super.noSuchMethod(
            Invocation.getter(#focusNode),
            returnValue: _FakeFocusNode_17(this, Invocation.getter(#focusNode)),
            returnValueForMissingStub: _FakeFocusNode_17(
              this,
              Invocation.getter(#focusNode),
            ),
          )
          as _i9.FocusNode);

  @override
  _i9.ValueNotifier<bool> get userGestureInProgressNotifier =>
      (super.noSuchMethod(
            Invocation.getter(#userGestureInProgressNotifier),
            returnValue: _FakeValueNotifier_18<bool>(
              this,
              Invocation.getter(#userGestureInProgressNotifier),
            ),
            returnValueForMissingStub: _FakeValueNotifier_18<bool>(
              this,
              Invocation.getter(#userGestureInProgressNotifier),
            ),
          )
          as _i9.ValueNotifier<bool>);

  @override
  bool get userGestureInProgress =>
      (super.noSuchMethod(
            Invocation.getter(#userGestureInProgress),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  _i9.Navigator get widget =>
      (super.noSuchMethod(
            Invocation.getter(#widget),
            returnValue: _FakeNavigator_19(this, Invocation.getter(#widget)),
            returnValueForMissingStub: _FakeNavigator_19(
              this,
              Invocation.getter(#widget),
            ),
          )
          as _i9.Navigator);

  @override
  _i9.BuildContext get context =>
      (super.noSuchMethod(
            Invocation.getter(#context),
            returnValue: _FakeBuildContext_20(
              this,
              Invocation.getter(#context),
            ),
            returnValueForMissingStub: _FakeBuildContext_20(
              this,
              Invocation.getter(#context),
            ),
          )
          as _i9.BuildContext);

  @override
  bool get mounted =>
      (super.noSuchMethod(
            Invocation.getter(#mounted),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  bool get restorePending =>
      (super.noSuchMethod(
            Invocation.getter(#restorePending),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  void initState() => super.noSuchMethod(
    Invocation.method(#initState, []),
    returnValueForMissingStub: null,
  );

  @override
  void restoreState(_i9.RestorationBucket? oldBucket, bool? initialRestore) =>
      super.noSuchMethod(
        Invocation.method(#restoreState, [oldBucket, initialRestore]),
        returnValueForMissingStub: null,
      );

  @override
  void didToggleBucket(_i9.RestorationBucket? oldBucket) => super.noSuchMethod(
    Invocation.method(#didToggleBucket, [oldBucket]),
    returnValueForMissingStub: null,
  );

  @override
  void didChangeDependencies() => super.noSuchMethod(
    Invocation.method(#didChangeDependencies, []),
    returnValueForMissingStub: null,
  );

  @override
  void didUpdateWidget(_i9.StatefulWidget? oldWidget) => super.noSuchMethod(
    Invocation.method(#didUpdateWidget, [oldWidget]),
    returnValueForMissingStub: null,
  );

  @override
  void deactivate() => super.noSuchMethod(
    Invocation.method(#deactivate, []),
    returnValueForMissingStub: null,
  );

  @override
  void activate() => super.noSuchMethod(
    Invocation.method(#activate, []),
    returnValueForMissingStub: null,
  );

  @override
  void dispose() => super.noSuchMethod(
    Invocation.method(#dispose, []),
    returnValueForMissingStub: null,
  );

  @override
  _i13.Future<T?> pushNamed<T extends Object?>(
    String? routeName, {
    Object? arguments,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#pushNamed, [routeName], {#arguments: arguments}),
            returnValue: _i13.Future<T?>.value(),
            returnValueForMissingStub: _i13.Future<T?>.value(),
          )
          as _i13.Future<T?>);

  @override
  String restorablePushNamed<T extends Object?>(
    String? routeName, {
    Object? arguments,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #restorablePushNamed,
              [routeName],
              {#arguments: arguments},
            ),
            returnValue: _i17.dummyValue<String>(
              this,
              Invocation.method(
                #restorablePushNamed,
                [routeName],
                {#arguments: arguments},
              ),
            ),
            returnValueForMissingStub: _i17.dummyValue<String>(
              this,
              Invocation.method(
                #restorablePushNamed,
                [routeName],
                {#arguments: arguments},
              ),
            ),
          )
          as String);

  @override
  _i13.Future<T?> pushReplacementNamed<T extends Object?, TO extends Object?>(
    String? routeName, {
    TO? result,
    Object? arguments,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #pushReplacementNamed,
              [routeName],
              {#result: result, #arguments: arguments},
            ),
            returnValue: _i13.Future<T?>.value(),
            returnValueForMissingStub: _i13.Future<T?>.value(),
          )
          as _i13.Future<T?>);

  @override
  String restorablePushReplacementNamed<T extends Object?, TO extends Object?>(
    String? routeName, {
    TO? result,
    Object? arguments,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #restorablePushReplacementNamed,
              [routeName],
              {#result: result, #arguments: arguments},
            ),
            returnValue: _i17.dummyValue<String>(
              this,
              Invocation.method(
                #restorablePushReplacementNamed,
                [routeName],
                {#result: result, #arguments: arguments},
              ),
            ),
            returnValueForMissingStub: _i17.dummyValue<String>(
              this,
              Invocation.method(
                #restorablePushReplacementNamed,
                [routeName],
                {#result: result, #arguments: arguments},
              ),
            ),
          )
          as String);

  @override
  _i13.Future<T?> popAndPushNamed<T extends Object?, TO extends Object?>(
    String? routeName, {
    TO? result,
    Object? arguments,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #popAndPushNamed,
              [routeName],
              {#result: result, #arguments: arguments},
            ),
            returnValue: _i13.Future<T?>.value(),
            returnValueForMissingStub: _i13.Future<T?>.value(),
          )
          as _i13.Future<T?>);

  @override
  String restorablePopAndPushNamed<T extends Object?, TO extends Object?>(
    String? routeName, {
    TO? result,
    Object? arguments,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #restorablePopAndPushNamed,
              [routeName],
              {#result: result, #arguments: arguments},
            ),
            returnValue: _i17.dummyValue<String>(
              this,
              Invocation.method(
                #restorablePopAndPushNamed,
                [routeName],
                {#result: result, #arguments: arguments},
              ),
            ),
            returnValueForMissingStub: _i17.dummyValue<String>(
              this,
              Invocation.method(
                #restorablePopAndPushNamed,
                [routeName],
                {#result: result, #arguments: arguments},
              ),
            ),
          )
          as String);

  @override
  _i13.Future<T?> pushNamedAndRemoveUntil<T extends Object?>(
    String? newRouteName,
    _i9.RoutePredicate? predicate, {
    Object? arguments,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #pushNamedAndRemoveUntil,
              [newRouteName, predicate],
              {#arguments: arguments},
            ),
            returnValue: _i13.Future<T?>.value(),
            returnValueForMissingStub: _i13.Future<T?>.value(),
          )
          as _i13.Future<T?>);

  @override
  String restorablePushNamedAndRemoveUntil<T extends Object?>(
    String? newRouteName,
    _i9.RoutePredicate? predicate, {
    Object? arguments,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #restorablePushNamedAndRemoveUntil,
              [newRouteName, predicate],
              {#arguments: arguments},
            ),
            returnValue: _i17.dummyValue<String>(
              this,
              Invocation.method(
                #restorablePushNamedAndRemoveUntil,
                [newRouteName, predicate],
                {#arguments: arguments},
              ),
            ),
            returnValueForMissingStub: _i17.dummyValue<String>(
              this,
              Invocation.method(
                #restorablePushNamedAndRemoveUntil,
                [newRouteName, predicate],
                {#arguments: arguments},
              ),
            ),
          )
          as String);

  @override
  _i13.Future<T?> push<T extends Object?>(_i9.Route<T>? route) =>
      (super.noSuchMethod(
            Invocation.method(#push, [route]),
            returnValue: _i13.Future<T?>.value(),
            returnValueForMissingStub: _i13.Future<T?>.value(),
          )
          as _i13.Future<T?>);

  @override
  String restorablePush<T extends Object?>(
    _i9.RestorableRouteBuilder<T>? routeBuilder, {
    Object? arguments,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #restorablePush,
              [routeBuilder],
              {#arguments: arguments},
            ),
            returnValue: _i17.dummyValue<String>(
              this,
              Invocation.method(
                #restorablePush,
                [routeBuilder],
                {#arguments: arguments},
              ),
            ),
            returnValueForMissingStub: _i17.dummyValue<String>(
              this,
              Invocation.method(
                #restorablePush,
                [routeBuilder],
                {#arguments: arguments},
              ),
            ),
          )
          as String);

  @override
  _i13.Future<T?> pushReplacement<T extends Object?, TO extends Object?>(
    _i9.Route<T>? newRoute, {
    TO? result,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#pushReplacement, [newRoute], {#result: result}),
            returnValue: _i13.Future<T?>.value(),
            returnValueForMissingStub: _i13.Future<T?>.value(),
          )
          as _i13.Future<T?>);

  @override
  String restorablePushReplacement<T extends Object?, TO extends Object?>(
    _i9.RestorableRouteBuilder<T>? routeBuilder, {
    TO? result,
    Object? arguments,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #restorablePushReplacement,
              [routeBuilder],
              {#result: result, #arguments: arguments},
            ),
            returnValue: _i17.dummyValue<String>(
              this,
              Invocation.method(
                #restorablePushReplacement,
                [routeBuilder],
                {#result: result, #arguments: arguments},
              ),
            ),
            returnValueForMissingStub: _i17.dummyValue<String>(
              this,
              Invocation.method(
                #restorablePushReplacement,
                [routeBuilder],
                {#result: result, #arguments: arguments},
              ),
            ),
          )
          as String);

  @override
  _i13.Future<T?> pushAndRemoveUntil<T extends Object?>(
    _i9.Route<T>? newRoute,
    _i9.RoutePredicate? predicate,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#pushAndRemoveUntil, [newRoute, predicate]),
            returnValue: _i13.Future<T?>.value(),
            returnValueForMissingStub: _i13.Future<T?>.value(),
          )
          as _i13.Future<T?>);

  @override
  String restorablePushAndRemoveUntil<T extends Object?>(
    _i9.RestorableRouteBuilder<T>? newRouteBuilder,
    _i9.RoutePredicate? predicate, {
    Object? arguments,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #restorablePushAndRemoveUntil,
              [newRouteBuilder, predicate],
              {#arguments: arguments},
            ),
            returnValue: _i17.dummyValue<String>(
              this,
              Invocation.method(
                #restorablePushAndRemoveUntil,
                [newRouteBuilder, predicate],
                {#arguments: arguments},
              ),
            ),
            returnValueForMissingStub: _i17.dummyValue<String>(
              this,
              Invocation.method(
                #restorablePushAndRemoveUntil,
                [newRouteBuilder, predicate],
                {#arguments: arguments},
              ),
            ),
          )
          as String);

  @override
  void replace<T extends Object?>({
    required _i9.Route<dynamic>? oldRoute,
    required _i9.Route<T>? newRoute,
  }) => super.noSuchMethod(
    Invocation.method(#replace, [], {#oldRoute: oldRoute, #newRoute: newRoute}),
    returnValueForMissingStub: null,
  );

  @override
  String restorableReplace<T extends Object?>({
    required _i9.Route<dynamic>? oldRoute,
    required _i9.RestorableRouteBuilder<T>? newRouteBuilder,
    Object? arguments,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#restorableReplace, [], {
              #oldRoute: oldRoute,
              #newRouteBuilder: newRouteBuilder,
              #arguments: arguments,
            }),
            returnValue: _i17.dummyValue<String>(
              this,
              Invocation.method(#restorableReplace, [], {
                #oldRoute: oldRoute,
                #newRouteBuilder: newRouteBuilder,
                #arguments: arguments,
              }),
            ),
            returnValueForMissingStub: _i17.dummyValue<String>(
              this,
              Invocation.method(#restorableReplace, [], {
                #oldRoute: oldRoute,
                #newRouteBuilder: newRouteBuilder,
                #arguments: arguments,
              }),
            ),
          )
          as String);

  @override
  void replaceRouteBelow<T extends Object?>({
    required _i9.Route<dynamic>? anchorRoute,
    required _i9.Route<T>? newRoute,
  }) => super.noSuchMethod(
    Invocation.method(#replaceRouteBelow, [], {
      #anchorRoute: anchorRoute,
      #newRoute: newRoute,
    }),
    returnValueForMissingStub: null,
  );

  @override
  String restorableReplaceRouteBelow<T extends Object?>({
    required _i9.Route<dynamic>? anchorRoute,
    required _i9.RestorableRouteBuilder<T>? newRouteBuilder,
    Object? arguments,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#restorableReplaceRouteBelow, [], {
              #anchorRoute: anchorRoute,
              #newRouteBuilder: newRouteBuilder,
              #arguments: arguments,
            }),
            returnValue: _i17.dummyValue<String>(
              this,
              Invocation.method(#restorableReplaceRouteBelow, [], {
                #anchorRoute: anchorRoute,
                #newRouteBuilder: newRouteBuilder,
                #arguments: arguments,
              }),
            ),
            returnValueForMissingStub: _i17.dummyValue<String>(
              this,
              Invocation.method(#restorableReplaceRouteBelow, [], {
                #anchorRoute: anchorRoute,
                #newRouteBuilder: newRouteBuilder,
                #arguments: arguments,
              }),
            ),
          )
          as String);

  @override
  bool canPop() =>
      (super.noSuchMethod(
            Invocation.method(#canPop, []),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  _i13.Future<bool> maybePop<T extends Object?>([T? result]) =>
      (super.noSuchMethod(
            Invocation.method(#maybePop, [result]),
            returnValue: _i13.Future<bool>.value(false),
            returnValueForMissingStub: _i13.Future<bool>.value(false),
          )
          as _i13.Future<bool>);

  @override
  void pop<T extends Object?>([T? result]) => super.noSuchMethod(
    Invocation.method(#pop, [result]),
    returnValueForMissingStub: null,
  );

  @override
  void popUntil(_i9.RoutePredicate? predicate) => super.noSuchMethod(
    Invocation.method(#popUntil, [predicate]),
    returnValueForMissingStub: null,
  );

  @override
  void removeRoute(_i9.Route<dynamic>? route) => super.noSuchMethod(
    Invocation.method(#removeRoute, [route]),
    returnValueForMissingStub: null,
  );

  @override
  void removeRouteBelow(_i9.Route<dynamic>? anchorRoute) => super.noSuchMethod(
    Invocation.method(#removeRouteBelow, [anchorRoute]),
    returnValueForMissingStub: null,
  );

  @override
  void finalizeRoute(_i9.Route<dynamic>? route) => super.noSuchMethod(
    Invocation.method(#finalizeRoute, [route]),
    returnValueForMissingStub: null,
  );

  @override
  void didStartUserGesture() => super.noSuchMethod(
    Invocation.method(#didStartUserGesture, []),
    returnValueForMissingStub: null,
  );

  @override
  void didStopUserGesture() => super.noSuchMethod(
    Invocation.method(#didStopUserGesture, []),
    returnValueForMissingStub: null,
  );

  @override
  _i9.Widget build(_i9.BuildContext? context) =>
      (super.noSuchMethod(
            Invocation.method(#build, [context]),
            returnValue: _FakeWidget_21(
              this,
              Invocation.method(#build, [context]),
            ),
            returnValueForMissingStub: _FakeWidget_21(
              this,
              Invocation.method(#build, [context]),
            ),
          )
          as _i9.Widget);

  @override
  void reassemble() => super.noSuchMethod(
    Invocation.method(#reassemble, []),
    returnValueForMissingStub: null,
  );

  @override
  void setState(_i29.VoidCallback? fn) => super.noSuchMethod(
    Invocation.method(#setState, [fn]),
    returnValueForMissingStub: null,
  );

  @override
  void debugFillProperties(_i10.DiagnosticPropertiesBuilder? properties) =>
      super.noSuchMethod(
        Invocation.method(#debugFillProperties, [properties]),
        returnValueForMissingStub: null,
      );

  @override
  String toString({_i9.DiagnosticLevel? minLevel = _i9.DiagnosticLevel.info}) =>
      super.toString();

  @override
  String toStringShort() =>
      (super.noSuchMethod(
            Invocation.method(#toStringShort, []),
            returnValue: _i17.dummyValue<String>(
              this,
              Invocation.method(#toStringShort, []),
            ),
            returnValueForMissingStub: _i17.dummyValue<String>(
              this,
              Invocation.method(#toStringShort, []),
            ),
          )
          as String);

  @override
  _i9.DiagnosticsNode toDiagnosticsNode({
    String? name,
    _i10.DiagnosticsTreeStyle? style,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#toDiagnosticsNode, [], {
              #name: name,
              #style: style,
            }),
            returnValue: _FakeDiagnosticsNode_22(
              this,
              Invocation.method(#toDiagnosticsNode, [], {
                #name: name,
                #style: style,
              }),
            ),
            returnValueForMissingStub: _FakeDiagnosticsNode_22(
              this,
              Invocation.method(#toDiagnosticsNode, [], {
                #name: name,
                #style: style,
              }),
            ),
          )
          as _i9.DiagnosticsNode);

  @override
  _i11.Ticker createTicker(_i11.TickerCallback? onTick) =>
      (super.noSuchMethod(
            Invocation.method(#createTicker, [onTick]),
            returnValue: _FakeTicker_23(
              this,
              Invocation.method(#createTicker, [onTick]),
            ),
            returnValueForMissingStub: _FakeTicker_23(
              this,
              Invocation.method(#createTicker, [onTick]),
            ),
          )
          as _i11.Ticker);

  @override
  void registerForRestoration(
    _i9.RestorableProperty<Object?>? property,
    String? restorationId,
  ) => super.noSuchMethod(
    Invocation.method(#registerForRestoration, [property, restorationId]),
    returnValueForMissingStub: null,
  );

  @override
  void unregisterFromRestoration(_i9.RestorableProperty<Object?>? property) =>
      super.noSuchMethod(
        Invocation.method(#unregisterFromRestoration, [property]),
        returnValueForMissingStub: null,
      );

  @override
  void didUpdateRestorationId() => super.noSuchMethod(
    Invocation.method(#didUpdateRestorationId, []),
    returnValueForMissingStub: null,
  );
}

/// A class which mocks [OverlayState].
///
/// See the documentation for Mockito's code generation for more information.
class MockOverlayState extends _i1.Mock implements _i9.OverlayState {
  @override
  _i9.Overlay get widget =>
      (super.noSuchMethod(
            Invocation.getter(#widget),
            returnValue: _FakeOverlay_24(this, Invocation.getter(#widget)),
            returnValueForMissingStub: _FakeOverlay_24(
              this,
              Invocation.getter(#widget),
            ),
          )
          as _i9.Overlay);

  @override
  _i9.BuildContext get context =>
      (super.noSuchMethod(
            Invocation.getter(#context),
            returnValue: _FakeBuildContext_20(
              this,
              Invocation.getter(#context),
            ),
            returnValueForMissingStub: _FakeBuildContext_20(
              this,
              Invocation.getter(#context),
            ),
          )
          as _i9.BuildContext);

  @override
  bool get mounted =>
      (super.noSuchMethod(
            Invocation.getter(#mounted),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  void initState() => super.noSuchMethod(
    Invocation.method(#initState, []),
    returnValueForMissingStub: null,
  );

  @override
  void insert(
    _i9.OverlayEntry? entry, {
    _i9.OverlayEntry? below,
    _i9.OverlayEntry? above,
  }) => super.noSuchMethod(
    Invocation.method(#insert, [entry], {#below: below, #above: above}),
    returnValueForMissingStub: null,
  );

  @override
  void insertAll(
    Iterable<_i9.OverlayEntry>? entries, {
    _i9.OverlayEntry? below,
    _i9.OverlayEntry? above,
  }) => super.noSuchMethod(
    Invocation.method(#insertAll, [entries], {#below: below, #above: above}),
    returnValueForMissingStub: null,
  );

  @override
  void rearrange(
    Iterable<_i9.OverlayEntry>? newEntries, {
    _i9.OverlayEntry? below,
    _i9.OverlayEntry? above,
  }) => super.noSuchMethod(
    Invocation.method(#rearrange, [newEntries], {#below: below, #above: above}),
    returnValueForMissingStub: null,
  );

  @override
  bool debugIsVisible(_i9.OverlayEntry? entry) =>
      (super.noSuchMethod(
            Invocation.method(#debugIsVisible, [entry]),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  _i9.Widget build(_i9.BuildContext? context) =>
      (super.noSuchMethod(
            Invocation.method(#build, [context]),
            returnValue: _FakeWidget_21(
              this,
              Invocation.method(#build, [context]),
            ),
            returnValueForMissingStub: _FakeWidget_21(
              this,
              Invocation.method(#build, [context]),
            ),
          )
          as _i9.Widget);

  @override
  void debugFillProperties(_i10.DiagnosticPropertiesBuilder? properties) =>
      super.noSuchMethod(
        Invocation.method(#debugFillProperties, [properties]),
        returnValueForMissingStub: null,
      );

  @override
  void didUpdateWidget(_i9.Overlay? oldWidget) => super.noSuchMethod(
    Invocation.method(#didUpdateWidget, [oldWidget]),
    returnValueForMissingStub: null,
  );

  @override
  void reassemble() => super.noSuchMethod(
    Invocation.method(#reassemble, []),
    returnValueForMissingStub: null,
  );

  @override
  void setState(_i29.VoidCallback? fn) => super.noSuchMethod(
    Invocation.method(#setState, [fn]),
    returnValueForMissingStub: null,
  );

  @override
  void deactivate() => super.noSuchMethod(
    Invocation.method(#deactivate, []),
    returnValueForMissingStub: null,
  );

  @override
  void activate() => super.noSuchMethod(
    Invocation.method(#activate, []),
    returnValueForMissingStub: null,
  );

  @override
  void dispose() => super.noSuchMethod(
    Invocation.method(#dispose, []),
    returnValueForMissingStub: null,
  );

  @override
  void didChangeDependencies() => super.noSuchMethod(
    Invocation.method(#didChangeDependencies, []),
    returnValueForMissingStub: null,
  );

  @override
  String toString({_i9.DiagnosticLevel? minLevel = _i9.DiagnosticLevel.info}) =>
      super.toString();

  @override
  String toStringShort() =>
      (super.noSuchMethod(
            Invocation.method(#toStringShort, []),
            returnValue: _i17.dummyValue<String>(
              this,
              Invocation.method(#toStringShort, []),
            ),
            returnValueForMissingStub: _i17.dummyValue<String>(
              this,
              Invocation.method(#toStringShort, []),
            ),
          )
          as String);

  @override
  _i9.DiagnosticsNode toDiagnosticsNode({
    String? name,
    _i10.DiagnosticsTreeStyle? style,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#toDiagnosticsNode, [], {
              #name: name,
              #style: style,
            }),
            returnValue: _FakeDiagnosticsNode_22(
              this,
              Invocation.method(#toDiagnosticsNode, [], {
                #name: name,
                #style: style,
              }),
            ),
            returnValueForMissingStub: _FakeDiagnosticsNode_22(
              this,
              Invocation.method(#toDiagnosticsNode, [], {
                #name: name,
                #style: style,
              }),
            ),
          )
          as _i9.DiagnosticsNode);

  @override
  _i11.Ticker createTicker(_i11.TickerCallback? onTick) =>
      (super.noSuchMethod(
            Invocation.method(#createTicker, [onTick]),
            returnValue: _FakeTicker_23(
              this,
              Invocation.method(#createTicker, [onTick]),
            ),
            returnValueForMissingStub: _FakeTicker_23(
              this,
              Invocation.method(#createTicker, [onTick]),
            ),
          )
          as _i11.Ticker);
}
