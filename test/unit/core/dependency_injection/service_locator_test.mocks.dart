// Mocks generated by Mockito 5.4.5 from annotations
// in weather_app_assignment/test/unit/core/dependency_injection/service_locator_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i6;

import 'package:flutter/material.dart' as _i7;
import 'package:flutter_bloc/flutter_bloc.dart' as _i16;
import 'package:fpdart/fpdart.dart' as _i18;
import 'package:internet_connection_checker_plus/internet_connection_checker_plus.dart'
    as _i12;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i10;
import 'package:weather_app_assignment/core/services/firebase_manager.dart'
    as _i8;
import 'package:weather_app_assignment/core/services/network_checker.dart'
    as _i5;
import 'package:weather_app_assignment/core/services/secure_storage.dart'
    as _i9;
import 'package:weather_app_assignment/data/exception/DataException.dart'
    as _i19;
import 'package:weather_app_assignment/data/models/country.dart' as _i14;
import 'package:weather_app_assignment/data/models/weather_forecast.dart'
    as _i21;
import 'package:weather_app_assignment/data/repositories/i_location_repository.dart'
    as _i17;
import 'package:weather_app_assignment/data/repositories/i_weather_repository.dart'
    as _i20;
import 'package:weather_app_assignment/data/service_manager.dart' as _i11;
import 'package:weather_app_assignment/data/services/location_service.dart'
    as _i2;
import 'package:weather_app_assignment/data/services/weather_service.dart'
    as _i3;
import 'package:weather_app_assignment/features/location/bloc/location_bloc.dart'
    as _i13;
import 'package:weather_app_assignment/features/location/bloc/location_event.dart'
    as _i15;
import 'package:weather_app_assignment/features/location/bloc/location_state.dart'
    as _i4;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeLocationService_0 extends _i1.SmartFake
    implements _i2.LocationService {
  _FakeLocationService_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeWeatherService_1 extends _i1.SmartFake
    implements _i3.WeatherService {
  _FakeWeatherService_1(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeDuration_2 extends _i1.SmartFake implements Duration {
  _FakeDuration_2(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeLocationState_3 extends _i1.SmartFake implements _i4.LocationState {
  _FakeLocationState_3(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [NetworkChecker].
///
/// See the documentation for Mockito's code generation for more information.
class MockNetworkChecker extends _i1.Mock implements _i5.NetworkChecker {
  MockNetworkChecker() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool get isInitialized =>
      (super.noSuchMethod(Invocation.getter(#isInitialized), returnValue: false)
          as bool);

  @override
  set isInitialized(bool? _isInitialized) => super.noSuchMethod(
    Invocation.setter(#isInitialized, _isInitialized),
    returnValueForMissingStub: null,
  );

  @override
  _i6.Stream<bool> get connectionStatus =>
      (super.noSuchMethod(
            Invocation.getter(#connectionStatus),
            returnValue: _i6.Stream<bool>.empty(),
          )
          as _i6.Stream<bool>);

  @override
  bool get hasConnection =>
      (super.noSuchMethod(Invocation.getter(#hasConnection), returnValue: false)
          as bool);

  @override
  _i6.Future<bool> checkConnection() =>
      (super.noSuchMethod(
            Invocation.method(#checkConnection, []),
            returnValue: _i6.Future<bool>.value(false),
          )
          as _i6.Future<bool>);

  @override
  void showConnectivityMessage(_i7.BuildContext? context, bool? isConnected) =>
      super.noSuchMethod(
        Invocation.method(#showConnectivityMessage, [context, isConnected]),
        returnValueForMissingStub: null,
      );

  @override
  void dispose() => super.noSuchMethod(
    Invocation.method(#dispose, []),
    returnValueForMissingStub: null,
  );
}

/// A class which mocks [FirebaseManager].
///
/// See the documentation for Mockito's code generation for more information.
class MockFirebaseManager extends _i1.Mock implements _i8.FirebaseManager {
  MockFirebaseManager() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool get isInitialized =>
      (super.noSuchMethod(Invocation.getter(#isInitialized), returnValue: false)
          as bool);

  @override
  void setSecureStorage(_i9.SecureStorage? secureStorage) => super.noSuchMethod(
    Invocation.method(#setSecureStorage, [secureStorage]),
    returnValueForMissingStub: null,
  );

  @override
  _i6.Future<void> initialize() =>
      (super.noSuchMethod(
            Invocation.method(#initialize, []),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  _i6.Future<bool> retry() =>
      (super.noSuchMethod(
            Invocation.method(#retry, []),
            returnValue: _i6.Future<bool>.value(false),
          )
          as _i6.Future<bool>);

  @override
  _i6.Future<String> getLocationApiKey() =>
      (super.noSuchMethod(
            Invocation.method(#getLocationApiKey, []),
            returnValue: _i6.Future<String>.value(
              _i10.dummyValue<String>(
                this,
                Invocation.method(#getLocationApiKey, []),
              ),
            ),
          )
          as _i6.Future<String>);

  @override
  _i6.Future<String> getWeatherApiKey() =>
      (super.noSuchMethod(
            Invocation.method(#getWeatherApiKey, []),
            returnValue: _i6.Future<String>.value(
              _i10.dummyValue<String>(
                this,
                Invocation.method(#getWeatherApiKey, []),
              ),
            ),
          )
          as _i6.Future<String>);
}

/// A class which mocks [ServiceManager].
///
/// See the documentation for Mockito's code generation for more information.
class MockServiceManager extends _i1.Mock implements _i11.ServiceManager {
  MockServiceManager() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool get isInitialized =>
      (super.noSuchMethod(Invocation.getter(#isInitialized), returnValue: false)
          as bool);

  @override
  _i2.LocationService get locationService =>
      (super.noSuchMethod(
            Invocation.getter(#locationService),
            returnValue: _FakeLocationService_0(
              this,
              Invocation.getter(#locationService),
            ),
          )
          as _i2.LocationService);

  @override
  _i3.WeatherService get weatherService =>
      (super.noSuchMethod(
            Invocation.getter(#weatherService),
            returnValue: _FakeWeatherService_1(
              this,
              Invocation.getter(#weatherService),
            ),
          )
          as _i3.WeatherService);

  @override
  void initialize({
    required String? locationApiKey,
    required String? weatherApiKey,
  }) => super.noSuchMethod(
    Invocation.method(#initialize, [], {
      #locationApiKey: locationApiKey,
      #weatherApiKey: weatherApiKey,
    }),
    returnValueForMissingStub: null,
  );

  @override
  void dispose() => super.noSuchMethod(
    Invocation.method(#dispose, []),
    returnValueForMissingStub: null,
  );
}

/// A class which mocks [InternetConnection].
///
/// See the documentation for Mockito's code generation for more information.
class MockInternetConnection extends _i1.Mock
    implements _i12.InternetConnection {
  MockInternetConnection() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool get enableStrictCheck =>
      (super.noSuchMethod(
            Invocation.getter(#enableStrictCheck),
            returnValue: false,
          )
          as bool);

  @override
  Duration get checkInterval =>
      (super.noSuchMethod(
            Invocation.getter(#checkInterval),
            returnValue: _FakeDuration_2(
              this,
              Invocation.getter(#checkInterval),
            ),
          )
          as Duration);

  @override
  _i6.Future<bool> get hasInternetAccess =>
      (super.noSuchMethod(
            Invocation.getter(#hasInternetAccess),
            returnValue: _i6.Future<bool>.value(false),
          )
          as _i6.Future<bool>);

  @override
  _i6.Future<_i12.InternetStatus> get internetStatus =>
      (super.noSuchMethod(
            Invocation.getter(#internetStatus),
            returnValue: _i6.Future<_i12.InternetStatus>.value(
              _i12.InternetStatus.connected,
            ),
          )
          as _i6.Future<_i12.InternetStatus>);

  @override
  _i6.Stream<_i12.InternetStatus> get onStatusChange =>
      (super.noSuchMethod(
            Invocation.getter(#onStatusChange),
            returnValue: _i6.Stream<_i12.InternetStatus>.empty(),
          )
          as _i6.Stream<_i12.InternetStatus>);

  @override
  void setIntervalAndResetTimer(Duration? duration) => super.noSuchMethod(
    Invocation.method(#setIntervalAndResetTimer, [duration]),
    returnValueForMissingStub: null,
  );
}

/// A class which mocks [LocationBloc].
///
/// See the documentation for Mockito's code generation for more information.
class MockLocationBloc extends _i1.Mock implements _i13.LocationBloc {
  MockLocationBloc() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.LocationState get state =>
      (super.noSuchMethod(
            Invocation.getter(#state),
            returnValue: _FakeLocationState_3(this, Invocation.getter(#state)),
          )
          as _i4.LocationState);

  @override
  _i6.Stream<_i4.LocationState> get stream =>
      (super.noSuchMethod(
            Invocation.getter(#stream),
            returnValue: _i6.Stream<_i4.LocationState>.empty(),
          )
          as _i6.Stream<_i4.LocationState>);

  @override
  bool get isClosed =>
      (super.noSuchMethod(Invocation.getter(#isClosed), returnValue: false)
          as bool);

  @override
  void getCountries() => super.noSuchMethod(
    Invocation.method(#getCountries, []),
    returnValueForMissingStub: null,
  );

  @override
  void onCountrySelected(_i14.Country? country) => super.noSuchMethod(
    Invocation.method(#onCountrySelected, [country]),
    returnValueForMissingStub: null,
  );

  @override
  void getCountryDetails(String? iso2) => super.noSuchMethod(
    Invocation.method(#getCountryDetails, [iso2]),
    returnValueForMissingStub: null,
  );

  @override
  void searchCountries(String? query) => super.noSuchMethod(
    Invocation.method(#searchCountries, [query]),
    returnValueForMissingStub: null,
  );

  @override
  void clearSelections({bool? clearCountry = false}) => super.noSuchMethod(
    Invocation.method(#clearSelections, [], {#clearCountry: clearCountry}),
    returnValueForMissingStub: null,
  );

  @override
  void add(_i15.LocationEvent? event) => super.noSuchMethod(
    Invocation.method(#add, [event]),
    returnValueForMissingStub: null,
  );

  @override
  void onEvent(_i15.LocationEvent? event) => super.noSuchMethod(
    Invocation.method(#onEvent, [event]),
    returnValueForMissingStub: null,
  );

  @override
  void emit(_i4.LocationState? state) => super.noSuchMethod(
    Invocation.method(#emit, [state]),
    returnValueForMissingStub: null,
  );

  @override
  void on<E extends _i15.LocationEvent>(
    _i16.EventHandler<E, _i4.LocationState>? handler, {
    _i16.EventTransformer<E>? transformer,
  }) => super.noSuchMethod(
    Invocation.method(#on, [handler], {#transformer: transformer}),
    returnValueForMissingStub: null,
  );

  @override
  void onTransition(
    _i16.Transition<_i15.LocationEvent, _i4.LocationState>? transition,
  ) => super.noSuchMethod(
    Invocation.method(#onTransition, [transition]),
    returnValueForMissingStub: null,
  );

  @override
  _i6.Future<void> close() =>
      (super.noSuchMethod(
            Invocation.method(#close, []),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  void onChange(_i16.Change<_i4.LocationState>? change) => super.noSuchMethod(
    Invocation.method(#onChange, [change]),
    returnValueForMissingStub: null,
  );

  @override
  void addError(Object? error, [StackTrace? stackTrace]) => super.noSuchMethod(
    Invocation.method(#addError, [error, stackTrace]),
    returnValueForMissingStub: null,
  );

  @override
  void onError(Object? error, StackTrace? stackTrace) => super.noSuchMethod(
    Invocation.method(#onError, [error, stackTrace]),
    returnValueForMissingStub: null,
  );
}

/// A class which mocks [ILocationRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockILocationRepository extends _i1.Mock
    implements _i17.ILocationRepository {
  MockILocationRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.Future<_i18.Either<_i19.DataException, List<_i14.Country>>>
  getAllCountries() =>
      (super.noSuchMethod(
            Invocation.method(#getAllCountries, []),
            returnValue: _i6.Future<
              _i18.Either<_i19.DataException, List<_i14.Country>>
            >.value(
              _i10.dummyValue<
                _i18.Either<_i19.DataException, List<_i14.Country>>
              >(this, Invocation.method(#getAllCountries, [])),
            ),
          )
          as _i6.Future<_i18.Either<_i19.DataException, List<_i14.Country>>>);

  @override
  _i6.Future<_i18.Either<_i19.DataException, _i14.Country>> getCountryDetails(
    String? iso2,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#getCountryDetails, [iso2]),
            returnValue: _i6.Future<
              _i18.Either<_i19.DataException, _i14.Country>
            >.value(
              _i10.dummyValue<_i18.Either<_i19.DataException, _i14.Country>>(
                this,
                Invocation.method(#getCountryDetails, [iso2]),
              ),
            ),
          )
          as _i6.Future<_i18.Either<_i19.DataException, _i14.Country>>);
}

/// A class which mocks [IWeatherRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockIWeatherRepository extends _i1.Mock
    implements _i20.IWeatherRepository {
  MockIWeatherRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.Future<_i18.Either<_i19.DataException, _i21.WeatherForecast>>
  getWeatherForecast({
    required double? lat,
    required double? lon,
    String? units,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#getWeatherForecast, [], {
              #lat: lat,
              #lon: lon,
              #units: units,
            }),
            returnValue: _i6.Future<
              _i18.Either<_i19.DataException, _i21.WeatherForecast>
            >.value(
              _i10.dummyValue<
                _i18.Either<_i19.DataException, _i21.WeatherForecast>
              >(
                this,
                Invocation.method(#getWeatherForecast, [], {
                  #lat: lat,
                  #lon: lon,
                  #units: units,
                }),
              ),
            ),
          )
          as _i6.Future<_i18.Either<_i19.DataException, _i21.WeatherForecast>>);

  @override
  _i6.Future<_i18.Either<_i19.DataException, List<_i21.DailyForecast>>>
  getFourDaysForecast({
    required double? lat,
    required double? lon,
    String? units,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#getFourDaysForecast, [], {
              #lat: lat,
              #lon: lon,
              #units: units,
            }),
            returnValue: _i6.Future<
              _i18.Either<_i19.DataException, List<_i21.DailyForecast>>
            >.value(
              _i10.dummyValue<
                _i18.Either<_i19.DataException, List<_i21.DailyForecast>>
              >(
                this,
                Invocation.method(#getFourDaysForecast, [], {
                  #lat: lat,
                  #lon: lon,
                  #units: units,
                }),
              ),
            ),
          )
          as _i6.Future<
            _i18.Either<_i19.DataException, List<_i21.DailyForecast>>
          >);
}
