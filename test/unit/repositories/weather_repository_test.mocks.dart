// Mocks generated by Mockito 5.4.5 from annotations
// in weather_app_assignment/test/unit/repositories/weather_repository_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i6;

import 'package:fpdart/fpdart.dart' as _i7;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i10;
import 'package:weather_app_assignment/data/api_client.dart' as _i4;
import 'package:weather_app_assignment/data/exception/DataException.dart'
    as _i8;
import 'package:weather_app_assignment/data/models/weather_forecast.dart'
    as _i9;
import 'package:weather_app_assignment/data/service_manager.dart' as _i5;
import 'package:weather_app_assignment/data/services/location_service.dart'
    as _i2;
import 'package:weather_app_assignment/data/services/weather_service.dart'
    as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeLocationService_0 extends _i1.SmartFake
    implements _i2.LocationService {
  _FakeLocationService_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeWeatherService_1 extends _i1.SmartFake
    implements _i3.WeatherService {
  _FakeWeatherService_1(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeApiClient_2 extends _i1.SmartFake implements _i4.ApiClient {
  _FakeApiClient_2(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [ServiceManager].
///
/// See the documentation for Mockito's code generation for more information.
class MockServiceManager extends _i1.Mock implements _i5.ServiceManager {
  MockServiceManager() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool get isInitialized =>
      (super.noSuchMethod(Invocation.getter(#isInitialized), returnValue: false)
          as bool);

  @override
  _i2.LocationService get locationService =>
      (super.noSuchMethod(
            Invocation.getter(#locationService),
            returnValue: _FakeLocationService_0(
              this,
              Invocation.getter(#locationService),
            ),
          )
          as _i2.LocationService);

  @override
  _i3.WeatherService get weatherService =>
      (super.noSuchMethod(
            Invocation.getter(#weatherService),
            returnValue: _FakeWeatherService_1(
              this,
              Invocation.getter(#weatherService),
            ),
          )
          as _i3.WeatherService);

  @override
  void initialize({
    required String? locationApiKey,
    required String? weatherApiKey,
  }) => super.noSuchMethod(
    Invocation.method(#initialize, [], {
      #locationApiKey: locationApiKey,
      #weatherApiKey: weatherApiKey,
    }),
    returnValueForMissingStub: null,
  );

  @override
  void dispose() => super.noSuchMethod(
    Invocation.method(#dispose, []),
    returnValueForMissingStub: null,
  );
}

/// A class which mocks [WeatherService].
///
/// See the documentation for Mockito's code generation for more information.
class MockWeatherService extends _i1.Mock implements _i3.WeatherService {
  MockWeatherService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.ApiClient get client =>
      (super.noSuchMethod(
            Invocation.getter(#client),
            returnValue: _FakeApiClient_2(this, Invocation.getter(#client)),
          )
          as _i4.ApiClient);

  @override
  _i6.Future<_i7.Either<_i8.DataException, _i9.WeatherForecast>>
  getWeatherForecast({
    required double? lat,
    required double? lon,
    String? units = 'metric',
  }) =>
      (super.noSuchMethod(
            Invocation.method(#getWeatherForecast, [], {
              #lat: lat,
              #lon: lon,
              #units: units,
            }),
            returnValue: _i6.Future<
              _i7.Either<_i8.DataException, _i9.WeatherForecast>
            >.value(
              _i10.dummyValue<
                _i7.Either<_i8.DataException, _i9.WeatherForecast>
              >(
                this,
                Invocation.method(#getWeatherForecast, [], {
                  #lat: lat,
                  #lon: lon,
                  #units: units,
                }),
              ),
            ),
          )
          as _i6.Future<_i7.Either<_i8.DataException, _i9.WeatherForecast>>);

  @override
  _i6.Future<_i7.Either<_i8.DataException, List<_i9.DailyForecast>>>
  getFourDaysForecast({
    required double? lat,
    required double? lon,
    String? units = 'metric',
  }) =>
      (super.noSuchMethod(
            Invocation.method(#getFourDaysForecast, [], {
              #lat: lat,
              #lon: lon,
              #units: units,
            }),
            returnValue: _i6.Future<
              _i7.Either<_i8.DataException, List<_i9.DailyForecast>>
            >.value(
              _i10.dummyValue<
                _i7.Either<_i8.DataException, List<_i9.DailyForecast>>
              >(
                this,
                Invocation.method(#getFourDaysForecast, [], {
                  #lat: lat,
                  #lon: lon,
                  #units: units,
                }),
              ),
            ),
          )
          as _i6.Future<
            _i7.Either<_i8.DataException, List<_i9.DailyForecast>>
          >);
}
