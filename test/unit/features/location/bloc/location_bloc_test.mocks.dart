// Mocks generated by Mockito 5.4.5 from annotations
// in weather_app_assignment/test/unit/features/location/bloc/location_bloc_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:fpdart/fpdart.dart' as _i4;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i7;
import 'package:weather_app_assignment/core/services/loading_manager.dart'
    as _i8;
import 'package:weather_app_assignment/data/exception/DataException.dart'
    as _i5;
import 'package:weather_app_assignment/data/models/country.dart' as _i6;
import 'package:weather_app_assignment/data/repositories/i_location_repository.dart'
    as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [ILocationRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockILocationRepository extends _i1.Mock
    implements _i2.ILocationRepository {
  @override
  _i3.Future<_i4.Either<_i5.DataException, List<_i6.Country>>>
  getAllCountries() =>
      (super.noSuchMethod(
            Invocation.method(#getAllCountries, []),
            returnValue: _i3.Future<
              _i4.Either<_i5.DataException, List<_i6.Country>>
            >.value(
              _i7.dummyValue<_i4.Either<_i5.DataException, List<_i6.Country>>>(
                this,
                Invocation.method(#getAllCountries, []),
              ),
            ),
            returnValueForMissingStub: _i3.Future<
              _i4.Either<_i5.DataException, List<_i6.Country>>
            >.value(
              _i7.dummyValue<_i4.Either<_i5.DataException, List<_i6.Country>>>(
                this,
                Invocation.method(#getAllCountries, []),
              ),
            ),
          )
          as _i3.Future<_i4.Either<_i5.DataException, List<_i6.Country>>>);

  @override
  _i3.Future<_i4.Either<_i5.DataException, _i6.Country>> getCountryDetails(
    String? iso2,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#getCountryDetails, [iso2]),
            returnValue:
                _i3.Future<_i4.Either<_i5.DataException, _i6.Country>>.value(
                  _i7.dummyValue<_i4.Either<_i5.DataException, _i6.Country>>(
                    this,
                    Invocation.method(#getCountryDetails, [iso2]),
                  ),
                ),
            returnValueForMissingStub:
                _i3.Future<_i4.Either<_i5.DataException, _i6.Country>>.value(
                  _i7.dummyValue<_i4.Either<_i5.DataException, _i6.Country>>(
                    this,
                    Invocation.method(#getCountryDetails, [iso2]),
                  ),
                ),
          )
          as _i3.Future<_i4.Either<_i5.DataException, _i6.Country>>);
}

/// A class which mocks [LoadingManager].
///
/// See the documentation for Mockito's code generation for more information.
class MockLoadingManager extends _i1.Mock implements _i8.LoadingManager {
  @override
  _i3.Stream<_i8.LoadingStatus> get loadingStream =>
      (super.noSuchMethod(
            Invocation.getter(#loadingStream),
            returnValue: _i3.Stream<_i8.LoadingStatus>.empty(),
            returnValueForMissingStub: _i3.Stream<_i8.LoadingStatus>.empty(),
          )
          as _i3.Stream<_i8.LoadingStatus>);

  @override
  bool get isLoading =>
      (super.noSuchMethod(
            Invocation.getter(#isLoading),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  void showLoading() => super.noSuchMethod(
    Invocation.method(#showLoading, []),
    returnValueForMissingStub: null,
  );

  @override
  void hideLoading() => super.noSuchMethod(
    Invocation.method(#hideLoading, []),
    returnValueForMissingStub: null,
  );

  @override
  void showLoadingWithMessage(String? message) => super.noSuchMethod(
    Invocation.method(#showLoadingWithMessage, [message]),
    returnValueForMissingStub: null,
  );

  @override
  void forceHideLoading() => super.noSuchMethod(
    Invocation.method(#forceHideLoading, []),
    returnValueForMissingStub: null,
  );

  @override
  void dispose() => super.noSuchMethod(
    Invocation.method(#dispose, []),
    returnValueForMissingStub: null,
  );
}
