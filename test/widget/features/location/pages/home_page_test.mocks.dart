// Mocks generated by Mockito 5.4.5 from annotations
// in weather_app_assignment/test/widget/features/location/pages/home_page_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:flutter/material.dart' as _i9;
import 'package:flutter_bloc/flutter_bloc.dart' as _i7;
import 'package:mockito/mockito.dart' as _i1;
import 'package:weather_app_assignment/core/services/network_checker.dart'
    as _i8;
import 'package:weather_app_assignment/data/models/country.dart' as _i5;
import 'package:weather_app_assignment/features/location/bloc/location_bloc.dart'
    as _i3;
import 'package:weather_app_assignment/features/location/bloc/location_event.dart'
    as _i6;
import 'package:weather_app_assignment/features/location/bloc/location_state.dart'
    as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeLocationState_0 extends _i1.SmartFake implements _i2.LocationState {
  _FakeLocationState_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [LocationBloc].
///
/// See the documentation for Mockito's code generation for more information.
class MockLocationBloc extends _i1.Mock implements _i3.LocationBloc {
  @override
  _i2.LocationState get state =>
      (super.noSuchMethod(
            Invocation.getter(#state),
            returnValue: _FakeLocationState_0(this, Invocation.getter(#state)),
            returnValueForMissingStub: _FakeLocationState_0(
              this,
              Invocation.getter(#state),
            ),
          )
          as _i2.LocationState);

  @override
  _i4.Stream<_i2.LocationState> get stream =>
      (super.noSuchMethod(
            Invocation.getter(#stream),
            returnValue: _i4.Stream<_i2.LocationState>.empty(),
            returnValueForMissingStub: _i4.Stream<_i2.LocationState>.empty(),
          )
          as _i4.Stream<_i2.LocationState>);

  @override
  bool get isClosed =>
      (super.noSuchMethod(
            Invocation.getter(#isClosed),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  void getCountries() => super.noSuchMethod(
    Invocation.method(#getCountries, []),
    returnValueForMissingStub: null,
  );

  @override
  void onCountrySelected(_i5.Country? country) => super.noSuchMethod(
    Invocation.method(#onCountrySelected, [country]),
    returnValueForMissingStub: null,
  );

  @override
  void getCountryDetails(String? iso2) => super.noSuchMethod(
    Invocation.method(#getCountryDetails, [iso2]),
    returnValueForMissingStub: null,
  );

  @override
  void searchCountries(String? query) => super.noSuchMethod(
    Invocation.method(#searchCountries, [query]),
    returnValueForMissingStub: null,
  );

  @override
  void clearSelections({bool? clearCountry = false}) => super.noSuchMethod(
    Invocation.method(#clearSelections, [], {#clearCountry: clearCountry}),
    returnValueForMissingStub: null,
  );

  @override
  void add(_i6.LocationEvent? event) => super.noSuchMethod(
    Invocation.method(#add, [event]),
    returnValueForMissingStub: null,
  );

  @override
  void onEvent(_i6.LocationEvent? event) => super.noSuchMethod(
    Invocation.method(#onEvent, [event]),
    returnValueForMissingStub: null,
  );

  @override
  void emit(_i2.LocationState? state) => super.noSuchMethod(
    Invocation.method(#emit, [state]),
    returnValueForMissingStub: null,
  );

  @override
  void on<E extends _i6.LocationEvent>(
    _i7.EventHandler<E, _i2.LocationState>? handler, {
    _i7.EventTransformer<E>? transformer,
  }) => super.noSuchMethod(
    Invocation.method(#on, [handler], {#transformer: transformer}),
    returnValueForMissingStub: null,
  );

  @override
  void onTransition(
    _i7.Transition<_i6.LocationEvent, _i2.LocationState>? transition,
  ) => super.noSuchMethod(
    Invocation.method(#onTransition, [transition]),
    returnValueForMissingStub: null,
  );

  @override
  _i4.Future<void> close() =>
      (super.noSuchMethod(
            Invocation.method(#close, []),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  void onChange(_i7.Change<_i2.LocationState>? change) => super.noSuchMethod(
    Invocation.method(#onChange, [change]),
    returnValueForMissingStub: null,
  );

  @override
  void addError(Object? error, [StackTrace? stackTrace]) => super.noSuchMethod(
    Invocation.method(#addError, [error, stackTrace]),
    returnValueForMissingStub: null,
  );

  @override
  void onError(Object? error, StackTrace? stackTrace) => super.noSuchMethod(
    Invocation.method(#onError, [error, stackTrace]),
    returnValueForMissingStub: null,
  );
}

/// A class which mocks [NetworkChecker].
///
/// See the documentation for Mockito's code generation for more information.
class MockNetworkChecker extends _i1.Mock implements _i8.NetworkChecker {
  @override
  bool get isInitialized =>
      (super.noSuchMethod(
            Invocation.getter(#isInitialized),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  set isInitialized(bool? _isInitialized) => super.noSuchMethod(
    Invocation.setter(#isInitialized, _isInitialized),
    returnValueForMissingStub: null,
  );

  @override
  _i4.Stream<bool> get connectionStatus =>
      (super.noSuchMethod(
            Invocation.getter(#connectionStatus),
            returnValue: _i4.Stream<bool>.empty(),
            returnValueForMissingStub: _i4.Stream<bool>.empty(),
          )
          as _i4.Stream<bool>);

  @override
  bool get hasConnection =>
      (super.noSuchMethod(
            Invocation.getter(#hasConnection),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  _i4.Future<bool> checkConnection() =>
      (super.noSuchMethod(
            Invocation.method(#checkConnection, []),
            returnValue: _i4.Future<bool>.value(false),
            returnValueForMissingStub: _i4.Future<bool>.value(false),
          )
          as _i4.Future<bool>);

  @override
  void showConnectivityMessage(_i9.BuildContext? context, bool? isConnected) =>
      super.noSuchMethod(
        Invocation.method(#showConnectivityMessage, [context, isConnected]),
        returnValueForMissingStub: null,
      );

  @override
  void dispose() => super.noSuchMethod(
    Invocation.method(#dispose, []),
    returnValueForMissingStub: null,
  );
}
